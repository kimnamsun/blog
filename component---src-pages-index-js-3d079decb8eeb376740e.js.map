{"version":3,"sources":["webpack://the-plain-gatsby-starter/./src/utils/index.js","webpack://the-plain-gatsby-starter/./src/pages/index.js"],"names":["getDateYear","node","Date","frontmatter","date","getFullYear","items","fn","posts","data","allMarkdownRemark","edges","filter","p","postsListContainer","Object","entries","reduce","result","item","acc","curr","year","map","i","key","post","id","className","Link","to","fields","slug","title","postsList","reverse"],"mappings":"0OAkBaA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACzB,IAAIC,KAAKD,EAAKE,YAAYC,MAAMC,eCyBlC,EAnCkB,SAAC,GAAc,IDNTC,EAAOC,ECSvBC,EAHwB,EAAXC,KAGAC,kBAAkBC,MAAMC,QACzC,SAAAC,GAAC,OAAgC,OAA5BA,EAAEZ,KAAKE,YAAYC,QAcpBU,GDxBgBR,ECwBaE,EDxBND,ECwBaP,EDvB1Ce,OAAOC,QACLV,EAAMW,QACJ,SAACC,EAAQC,GAAT,8BACKD,IADL,MAEGX,EAAGY,IAFN,kBAEmBD,EAAOX,EAAGY,KAAU,IAFvC,CAE4CA,IAF5C,MAIA,KAEFF,QAAO,SAACG,EAAKC,GACb,MAAM,GAAN,eAAWD,GAAX,CAAgB,CAAEE,KAAMD,EAAK,GAAIb,MAAOa,EAAK,QAC5C,KCcAE,KAAI,WAAYC,GAAZ,IAAGhB,EAAH,EAAGA,MAAH,OACH,uBAAKiB,IAAKD,GAdI,SAAAhB,GAAK,OACrBA,EAAMe,KAAI,SAAAG,GAAI,OACZ,sBAAID,IAAKC,EAAKzB,KAAK0B,IACjB,uBAAKC,UAAU,kBACb,6BAAQF,EAAKzB,KAAKE,YAAYC,OAEhC,uBAAKwB,UAAU,SACb,gBAAC,EAAAC,KAAD,CAAMC,GAAIJ,EAAKzB,KAAK8B,OAAOC,MAAON,EAAKzB,KAAKE,YAAY8B,YAQzDC,CAAU1B,OAGd2B,UACH,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKF,MAAM,SACX,+BACE,0BAAKnB","file":"component---src-pages-index-js-3d079decb8eeb376740e.js","sourcesContent":["// group items array based on the\n// value returned by calling fn with the current iterated item\n\nexport const groupBy = (items, fn) =>\n  Object.entries(\n    items.reduce(\n      (result, item) => ({\n        ...result,\n        [fn(item)]: [...(result[fn(item)] || []), item],\n      }),\n      {}\n    )\n  ).reduce((acc, curr) => {\n    return [...acc, { year: curr[0], posts: curr[1] }]\n  }, [])\n\n// get the Year of a specified date\n\nexport const getDateYear = ({ node }) =>\n  new Date(node.frontmatter.date).getFullYear()\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport DefaultLayout from \"../layouts/default\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\n\nimport { groupBy, getDateYear } from \"../utils\"\n\nconst IndexPage = ({ data }) => {\n  // all posts without dates are assumed to be drafts or pages\n  // not to be added to postsList\n  const posts = data.allMarkdownRemark.edges.filter(\n    p => p.node.frontmatter.date !== null\n  )\n  const postsList = posts =>\n    posts.map(post => (\n      <li key={post.node.id}>\n        <div className=\"post-date code\">\n          <small>{post.node.frontmatter.date}</small>\n        </div>\n        <div className=\"title\">\n          <Link to={post.node.fields.slug}>{post.node.frontmatter.title}</Link>\n        </div>\n      </li>\n    ))\n\n  const postsListContainer = groupBy(posts, getDateYear)\n    .map(({ posts }, i) => (\n      <div key={i}>\n        {postsList(posts)}\n      </div>\n    ))\n    .reverse()\n  return (\n    <DefaultLayout>\n      <SEO title=\"Home\" />\n      <section>\n        <ul>{postsListContainer}</ul>\n      </section>\n    </DefaultLayout>\n  )\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}