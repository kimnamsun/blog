{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-09-09/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>폴더의 depth가 깊어질수록 import시에 경로를 작성하는데 매우 귀찮고 코드도 깔끔해보이지 않다. 그럴때 Alias 설정을 해 간결하게 작성할 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//bad</span>\n<span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../Common/Button'</span>\n\n<span class=\"token comment\">//good</span>\n<span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'@/Common/Button'</span></code></pre></div>\n<h1>Alias설정</h1>\n<p>우선 tsconfig.json에 compilerOptions에 path를 지정한다.</p>\n<p><code class=\"language-text\">tsconfig.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t...\n\t\t<span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Module resolver 설치와 babelrc 설정</h1>\n<p>지금 현재 프로젝트는 js와 ts가 혼재되어있기 때문에 tsconfig에만 설정하면 js에서는 불러오지 못하는 이슈가 있어 babel module resolver를 설치해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add --dev babel-plugin-module-resolver</code></pre></div>\n<p>설치 후, .babelrc에 설정을 추가한다.</p>\n<p><code class=\"language-text\">.babelrc</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"module-resolver\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"alias\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"@\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>문제</h1>\n<p>여기까지 설정했는데 ts파일에서는 Alias가 제대로 적용이 되었으나 js에서는 import시 자동완성이 되지 않는 문제가 발생했다.<br>\n해결을 위해 jsconfig.json를 만들고 설정해주기로 했다.</p>\n<p><code class=\"language-text\">jsconfig.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"**/*.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"**/*.jsx\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 여전히 해결이 되지 않았다.<br>\n알고보니 jsconfig와 tsconfig를 같이 사용할때는 필연적으로 하나의 config만 본다는 사실을 알게되었다. (해당이슈 : <a href=\"https://github.com/microsoft/TypeScript/issues/15869\">https://github.com/microsoft/TypeScript/issues/15869</a>)<br>\n현재 js파일이 tsconfig를 보고 있으니 tsconfig에 includes에\n.js, jsx를 추가해주자!</p>\n<h1>tsconfig include 설정</h1>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"> <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n   <span class=\"token string\">\"**/*.d.ts\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">\"**/*.tsx\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">\"**/*.js\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">\"**/*.jsx\"</span>\n  <span class=\"token punctuation\">]</span></code></pre></div>\n<p>   js, jsx를 추가해주었더니 ts, js파일에서 모두 import시 자동완성을 사용할 수 있었다.</p>","frontmatter":{"date":"September 09, 2021","title":"Typescript Alias 설정시 마주친 오류"}}},"pageContext":{"slug":"/blog/2021-09-09/","prev":{"fields":{"slug":"/blog/2021-10-05/"},"frontmatter":{"title":"patch-package로 외부 라이브러리 수정해서 사용하기"}},"next":{"fields":{"slug":"/blog/2021-09-04/"},"frontmatter":{"title":"VAC 패턴"}}}},"staticQueryHashes":["2411212779","63159454"]}