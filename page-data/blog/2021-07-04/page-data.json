{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-07-04/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>자바스크립트를 공부하면서 가장 진입장벽이 높은 개념인 프로토타입,, 🤪\n하나하나 차근차근 살펴보기!</p>\n</blockquote>\n<h1>Prototype이란</h1>\n<p>자바스크립트는 프로토타입 기반 언어이다.<br>\n클래스 기반 언어에서는 상속을 사용하지만 프로토타입 기반 언어에서는 어떤 객체를 원형으로 삼고 이를 복제함으로써 상속과 비슷한 효과를 얻는다.</p>\n<p>Prototype은 말 그대로 객체의 원형이라고 할 수 있다. prototype이라는 프로퍼티는 그 용도가 약속되어 있는 특수한 프로퍼티다. prototype에 저장된 속성들은 생성자를 통해서 객체가 만들어질 때 그 객체에 연결된다.</p>\n<p>어떤 생성자 함수를 new 연산자와 함께 호출하면 constructor에 정의된 내용을 바탕으로 새로운 인스턴스가 생성된다. 이때 인스턴스에는 <strong>proto</strong>라는 프로퍼티가 자동으로 부여되는데 이 프로퍼티는 constructor의 prototype이라는 프로퍼티를 참조한다.</p>\n<p>예를 들어서 살펴보자!</p>\n<p>Dog라는 함수를 만들고, Dog에 bark라는 prototype 속성을 추가해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"bow wow\"</span></code></pre></div>\n<p><code class=\"language-text\">new</code> 연산자를 통해 인스턴스를 생성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bori <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>bori를 호출해보면, <code class=\"language-text\">__proto__</code>라는 프로퍼티와 bark속성이 부여되어있다.</p>\n<p><img src=\"https://media.vlpt.us/images/nsunny0908/post/d21a2d3d-f35e-4933-ad85-ee36621db7fd/A5AB7DB0-2E45-4EE3-BB4C-E3900CCFFE96.png\"></p>\n<h1>Prototype Chain</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> bori <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bori<span class=\"token punctuation\">.</span>bark<span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></code></pre></div>\n<p>생성자 SmallDog을 통해 만들어진 객체 bori가 Animal의 프로퍼티 bark에 접근 가능한 것은 prototype 체인으로 SmallDog과 Animal이 연결되어 있기 때문이다. 내부적으로는 아래와 같은 일이 일어난다.</p>\n<blockquote>\n<ol>\n<li>객체 bori에서 bark를 찾는다.</li>\n<li>없다면 SmallDog.prototype.bark를 찾는다.</li>\n<li>없다면 Dog.prototype.bark를 찾는다.</li>\n<li>없다면 Animal.prototype.bark를 찾는다.</li>\n</ol>\n</blockquote>\n<p>만약, bori와 SmallDog의 bark속성을 변경하면 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"wal wal\"</span>\n\n<span class=\"token keyword\">const</span> bori <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbori<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"bow wow\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bori<span class=\"token punctuation\">.</span>bark<span class=\"token punctuation\">)</span> <span class=\"token comment\">//bowwow</span></code></pre></div>\n<p><img src=\"https://media.vlpt.us/images/nsunny0908/post/57ecf57d-4943-4c97-a535-446d03849da6/7BD9CB36-C869-40E2-8E15-5D2E00DB3505.png\"></p>\n<blockquote>\n<p>prototype는 객체와 객체를 연결하는 체인의 역할을 한다.\n이러한 관계를 <strong>prototype chain</strong>이라고 한다.</p>\n</blockquote>\n<p>만약!! SmallDog.prototype = Animal.prototype 으로 한 후,\nSmallDog의 bark 값을 변경하면 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"bow wooooow\"</span>\n\n<span class=\"token keyword\">const</span> bori <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>SmallDog.prototype = Animal.prototype 으로 하면 안된다.\nSmallDog.prototype의 값을 변경하면 Animal.prototype도 변경하기 때문이다.</p>\n</blockquote>\n<p><img src=\"https://media.vlpt.us/images/nsunny0908/post/c018f4c6-3057-4d60-90ca-1b8aa198a6aa/11FDD7A9-BF9B-442F-82AA-0A9350A17411.png\"></p>\n<p>Dog.prototype = new Animal()은 Animal.prototype의 원형으로 하는 객체가 생성되기 때문에 new Animal()를 통해서 만들어진 객체에 변화가 생겨도 Animal.prototype의 객체에는 영향을 주지 않는다.</p>\n<h1>Prototype과 Class의 차이</h1>\n<p>es6부터 Class 문법이 추가되었다.<br>\n그렇다고 자바스크립트가 프로토타입 기반 언어에서 클래스 기반 언어가 된 것은 아니다.\n그렇다면 Class와 Prototype은 어떤 차이가 있을까?</p>\n<h2>Class는 상속이 가능하지만 Prototype은 상속이 불가능하다.</h2>\n<p>Prototype에서 상속을 구현하고자 한다면 앞서 설명했던 prototype chaining을 사용해야한다. 그렇지만 Class를 사용하면 객체 생성자로 구현했던 코드를 조금 더 명확하게 구현 할 수 있고 상속도 훨씬 쉽게 해줄 수 있기 때문에 Class를 사용하면 굳이\nprototype chaining 을 써야할 필요가 없다.</p>\n<h2>불변성과 가변성</h2>\n<p>Class는 '틀' 과 같아서 도중에 바뀌는 일이 없다. 같은 틀 안에서 찍어낸 인스턴스를 프로퍼티나 메소드를 추가 하지 않는 이상 동일한 형태를 가진다.</p>\n<p>반면 prototype 기반 언어는 객체가 곧 설계도가 되기 때문에 동적인 설계가 가능하다.</p>","frontmatter":{"date":"July 04, 2021","title":"Prototype"}}},"pageContext":{"slug":"/blog/2021-07-04/","prev":{"fields":{"slug":"/blog/2021-08-11/"},"frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)"}},"next":{"fields":{"slug":"/blog/2021-06-13/"},"frontmatter":{"title":"코딩 부트캠프와 좋은 개발자"}}}},"staticQueryHashes":["2411212779","63159454"]}