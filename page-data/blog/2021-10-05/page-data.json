{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-10-05/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>외부 라이브러리를 입맛대로 바꾸기 위해 간단하게 patch-package 라이브러리를 사용해보았다.</p>\n</blockquote>\n<h1>설치</h1>\n<p>npm 또는 yarn을 이용해 설치한다. 난 yarn을 쓰기 때문에 yarn으로 설치해주었다.</p>\n<p><code class=\"language-text\">yarn add patch-package postinstall-postinstall</code></p>\n<h2>postinstall 설치하는 이유</h2>\n<p>yarn은 postinstall hook을 <code class=\"language-text\">yarn</code>, <code class=\"language-text\">yarn add</code> 후에만 실행한다.\n<code class=\"language-text\">yarn remove</code>후에도 확실하게 postinstall hook을 사용하기 위해 설치해준다.<br>\n<a href=\"https://github.com/ds300/patch-package#why-use-postinstall-postinstall-with-yarn\">GitHub - ds300/patch-package: Fix broken node modules instantly</a></p>\n<ul>\n<li>postinstall 이란?\n패키지의 종속성 트리 변경 사항이 디스크에 기록되면(예: 종속성 또는 전이적 종속성이 추가, 제거 또는 변경된 후) 호출되는 yarn lifecycle script</li>\n</ul>\n<blockquote>\n<p>postinstall is called after a package's dependency tree changes are written to the disk -- e.g. after a dependency or transitive dependency is added, removed, or changed.\nIt is guaranteed to be called in topological order (in other words, your dependencies' postinstalls will always run before yours).\nFor backwards compatibility, preinstall and install are called as part of postinstall.</p>\n</blockquote>\n<p>설치를 해주었다면 <code class=\"language-text\">package.json</code> script에 다음과 같이 등록한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> “scripts”: {\n  “postinstall”: “patch-package”\n }</code></pre></div>\n<h1></h1>\n<p>node_modules 안에 외부 라이브러리 수정이 끝나면</p>\n<p><code class=\"language-text\">yarn postinstall 라이브러리이름</code></p>\n<p>명령어로 변경사항을 저장할 수 있다.</p>\n<p><img src=\"https://images.velog.io/images/nsunny0908/post/5a51ed43-d000-45d3-964e-2753d78fd70e/F8B409DA-B7DA-4D2A-AC73-0BDF4E88161C.png\"></p>\n<h2>‘dependencies’ of undefined</h2>\n<p>혹시 이 과정에서</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TypeError: Cannot read property ‘dependencies’ of undefined</code></pre></div>\n<p>다음과 같은 에러가 발생한다면 <code class=\"language-text\">package.lock.json</code>, <code class=\"language-text\">yarn.lock</code> 파일을 삭제하고 다시 <code class=\"language-text\">yarn</code>후에 <code class=\"language-text\">yarn postinstall 라이브러리이름</code> 과정을 다시 해주면 된다.\n나도 같은 에러가 발생했는데 <code class=\"language-text\">package.lock.json</code>에 patch-package 가 없어서 해당 에러가 발생했다.<br>\n(<a href=\"https://github.com/ds300/patch-package/issues/164\">Make patch fails on package lock file dependencies check. · Issue #164 · ds300/patch-package · GitHub</a>)</p>\n<p><img src=\"https://images.velog.io/images/nsunny0908/post/b8f1f685-f403-40d4-9eea-d8093599396a/BBAC01FD-F3A0-4672-B3DC-89DF820F6C20.png\"></p>\n<p>해당 과정까지 마치면 라이브러리의 변경사항이 변경된 파일로 올라와있는 것을 볼 수 있다.</p>","frontmatter":{"date":"October 05, 2021","title":"patch-package로 외부 라이브러리 수정해서 사용하기"}}},"pageContext":{"slug":"/blog/2021-10-05/","prev":{"fields":{"slug":"/blog/2021-11-25/"},"frontmatter":{"title":"Custom hook vs Function"}},"next":{"fields":{"slug":"/blog/2021-09-09/"},"frontmatter":{"title":"Typescript Alias 설정시 마주친 오류"}}}},"staticQueryHashes":["2411212779","63159454"]}