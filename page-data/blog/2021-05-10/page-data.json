{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-05-10/","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://media.vlpt.us/images/nsunny0908/post/4b613a08-f328-453e-b7f3-0e92bf8634ee/May-09-2021%2018-07-31.gif\"></p>\n<blockquote>\n<p>클론프로젝트를 하면서 꼭 한번 해보고 싶었던 무한 스크롤 기능과 로딩바 기능을 구현해보았다!</p>\n</blockquote>\n<h1>기존 scroll event의 문제점</h1>\n<p>스크롤을 끊임없이 감지하고 동기적으로 실행되기 때문에 메인 스레드에 영향을 준다.\n실제로 스크롤 이벤트로 무한스크롤기능을 구현할때의 상황.<br>\nscroll이 맨 밑에 있을때 감지해주는 함수를 달아놨는데 스크롤이 계속 맨 밑에 머물러있을때 끊임없이 함수가 호출되고 있다.</p>\n<h1>Intersection Observer API</h1>\n<p>간단히 말하자면 타겟이 화면에 노출되었는 지의 여부를 관찰할 수 있는 API\n교차되었을때 실행할 <code class=\"language-text\">callback</code> 함수와 <code class=\"language-text\">option</code>을 인자로 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>callback</h2>\n<p>타겟 엘리먼트가 교차되었을 때 실행할 함수</p>\n<h2>options</h2>\n<p>observer 콜백이 호출되는 상황을 조작할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">root</code><br>\n교차 영역의 기준이 될 root 엘리먼트.<br>\n기본값은 브라우저의 viewport</li>\n<li><code class=\"language-text\">rootMargin</code><br>\nroot엘리먼트의 margin값<br>\nthreshold<br>\n타겟에 대한 교차 영역 비율<br>\n0의 경우 : 타겟 엘리먼트가 교차영역에 진입했을 시점에 observer를 실행<br>\n1의 경우 : 타켓 엘리먼트 전체가 교차영역에 들어왔을 때 observer를 실행</li>\n</ul>\n<h2>method</h2>\n<ul>\n<li>\n<p>IntersectionObserver.observe(target)</p>\n<ul>\n<li>타겟 엘리먼트에 대한 IntersectionObserver를 등록 (관찰 시작)</li>\n</ul>\n</li>\n<li>\n<p>IntersectionObserver.unobserve(target)</p>\n<ul>\n<li>타겟 엘리먼트에 대한 관찰 중지</li>\n</ul>\n</li>\n<li>\n<p>IntersectionObserver.disconnect()</p>\n<ul>\n<li>모든 타겟 엘리먼트에 대한 관찰 중지</li>\n</ul>\n</li>\n</ul>\n<h1>React hook에 적용해보기</h1>\n<p>우선 <code class=\"language-text\">target</code>, 로딩중인지 아닌지를 판별해줄 <code class=\"language-text\">isLoading</code>, 현재 아이템 갯수를 나타내는 <code class=\"language-text\">itemCount</code>를 state로 지정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>itemCount<span class=\"token punctuation\">,</span> setItemCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">,</span> setTarget<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>target에 변화가 있을때마다 실행해줄 <code class=\"language-text\">useEffect</code>에 observer 객체를 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> observer\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> threshold<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> observer <span class=\"token operator\">&amp;&amp;</span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">callback</code>함수의 인자로 entry와 observer를 받는다.<br>\n타겟의 교차 상태를 boolean값으로 반환하는 <code class=\"language-text\">entry.isIntersecting</code>가 <code class=\"language-text\">true</code>일때 list를 fetch하는 함수를 호출하고 <code class=\"language-text\">itemCount</code>에 1을 더해 setState해준다.<br>\n(난 한페이지당 1개의 리스트만 호출하고 스크롤이 끝에 다다랐을때 하나씩 더 보여주는 무한스크롤을 구현 예정이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchBidsLists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setItemCount</span><span class=\"token punctuation\">(</span>itemCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리스트를 fetch해오는 함수.\n우선 <code class=\"language-text\">isLoading</code>을 <code class=\"language-text\">true</code>로 setState해주고, fetch를 통해 백엔드로부터 데이터를 받아온다.<br>\nsetTimeout을 통해 약간의 시간차를 줘 로딩바가 더 잘보일 수 있도록 했다.<br>\nlist의 갯수가 현재 <code class=\"language-text\">itemCount</code>와 같으면 loading이 끝난것이기 때문에 다시 <code class=\"language-text\">false</code>로 바꿔주었고, list를 <code class=\"language-text\">itemCount</code>의 수만큼 slice해 setState해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchBidsLists</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BIDS_API</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>day<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bidsData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>bidsData<span class=\"token punctuation\">.</span>auctions<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> itemCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setBidsLists</span><span class=\"token punctuation\">(</span>bidsData<span class=\"token punctuation\">.</span>auctions<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> itemCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 컴포넌트가 언마운트될때 <code class=\"language-text\">isLoading</code>을 <code class=\"language-text\">false</code>로 setState해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>로딩바부분.\n<code class=\"language-text\">isLoading</code>이 <code class=\"language-text\">true</code>일때만 로딩바가 보여야하므로 조건부렌더링을 걸어주었고 setTarget을 <code class=\"language-text\">forwardRef</code>로 지정해주었다.\n<code class=\"language-text\">forwardRef</code>는 React 컴포넌트에 ref prop을 넘겨서 그 내부에 있는 HTML 엘리먼트에 접근을 하게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  isLoading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token attr-name\">forwardRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setTarget<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"May 10, 2021","title":"Intersection Observer API를 활용한 무한스크롤"}}},"pageContext":{"slug":"/blog/2021-05-10/","prev":{"fields":{"slug":"/blog/2021-05-17/"},"frontmatter":{"title":"기술을 할 것인가, 예술을 할 것인가"}},"next":{"fields":{"slug":"/blog/2020-12-24/"},"frontmatter":{"title":"사진학도가 개발자가 된 이유"}}}},"staticQueryHashes":["2411212779","63159454"]}