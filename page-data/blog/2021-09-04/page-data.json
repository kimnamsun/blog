{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-09-04/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>회사프로젝트에 시범적으로 VAC패턴을 도입하기로 결정했다. 근데 VAC패턴이 뭐지?🤔</p>\n</blockquote>\n<h1>디자인패턴</h1>\n<p>우선 VAC패턴에 대해 이야기하기 전에 디자인패턴에 대한 대략적인 이해가 필요하다.\n디자인패턴은 아주 간단하게 말해 <code class=\"language-text\">설계 패턴</code>이다.<br>\n여러명의 개발자가 하나의 프로젝트를 할 때 각각의 기준에 따라 중구난방으로 설계하면\n효율적인 코드를 짜기 어려울 것이다.<br>\n설계적 문제점을 해결하고 여러 사람들이 쉽게 알아볼 수 있도록 하는 설계적 약속이 바로 디자인패턴이다.</p>\n<h1>VAC패턴을 도입하게 된 이유</h1>\n<p>그렇다면 우리는 왜! VAC패턴을 도입하기로 결정했을까?<br>\n우리 회사의 프론트팀은 리액트 환경에서 비즈니스 로직과 View의 관심사를 어떻게 하면 분리할 수 있을까에 대한 고민이 많았다.<br>\n버튼을 누르면 숫자가 증가하는 페이지를 개발자와 UI/UX디자이너가 함께 작업한다고 가정해보자.<br>\n비즈니스 로직과 View가 한군데에 모여있다면, UI/UX디자이너와 개발자가 JSX를 같이 관리해야하기 때문에 UI/UX디자이너가 JSX를 수정하는것이 쉽지 않고 컨플릭이 발생할 확률이 높아진다.</p>\n<h1>VAC패턴 (View Asset Component)</h1>\n<p>VAC 패턴은 View 컴포넌트에서 JSX 영역을 Props Object로 추상화하고, 비즈니스 로직컴포넌트와 View 컴포넌트를 따로 관리한다.</p>\n<p><img src=\"https://media.vlpt.us/images/kangkyeungseok/post/062cb3f6-81a0-4644-b160-64e4179461fb/image.png\"></p>\n<h1>사용해보기</h1>\n<p>input에 입력한 값을 옆에 나타내는 간단한 예제가 있다.\n먼저 vac패턴을 적용하지 않은 App.js이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleInput</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>vac패턴 사용시</h2>\n<p><code class=\"language-text\">App.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">,</span>\n    handleInput<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AppView</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>view에서 필요한 모든 데이터를 props의 형태로 view영역에 전달한다.</p>\n<p><code class=\"language-text\">App.view.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AppView</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> handleInput <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleInput</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AppView</code></pre></div>\n<p>VAC패턴의 가장 큰 장점은 관심사가 분리되어있다는 것이다.<br>\ninput의 디자인이 변경될 경우 View영역만 보면 되고, 비즈니스 로직이 변경될 경우 비즈니스 로직을 담당하는 영역만 보면 되기 때문이다.</p>\n<h2>마무리</h2>\n<p>아직 VAC패턴을 도입하는 초기 단계이기 때문에 아주 간단하게 블로깅해보았다. 이렇게 저렇게 사용해보면서 느껴지는 점들이나 참고해야할 점들을 추가할 예정이다!✨</p>","frontmatter":{"date":"September 04, 2021","title":"VAC 패턴"}}},"pageContext":{"slug":"/blog/2021-09-04/","prev":{"fields":{"slug":"/blog/2021-09-09/"},"frontmatter":{"title":"Typescript Alias 설정시 마주친 오류"}},"next":{"fields":{"slug":"/blog/2021-08-30/"},"frontmatter":{"title":"TDZ (Temporal Dead Zone)"}}}},"staticQueryHashes":["2411212779","63159454"]}