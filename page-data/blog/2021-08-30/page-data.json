{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-08-30/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>자바스크립트는 기본적으로 모든 선언을 호이스팅한다. 하지만 <code class=\"language-text\">let</code>은 선언 이전에 참조하면 참조에러가 발생한다. 그 이유는 바로 일시적 사각지대 때문이다.</p>\n</blockquote>\n<h1>TDZ(Temporal Dead Zone)</h1>\n<blockquote>\n<p>일시적인 사각지대.<br>\n스코프의 시작 지점부터 초기화 시작 지점까지의 구간</p>\n</blockquote>\n<h1>변수 선언의 3단계</h1>\n<p>javascript에서의 변수는 위의 사진처럼 <code class=\"language-text\">선언(Declaration phase)</code>, <code class=\"language-text\">초기화(Initialization phase)</code>, <code class=\"language-text\">할당(Assignment phase)</code>이라는 3단계에 걸쳐서 생성된다.</p>\n<p><img src=\"https://dmitripavlutin.com/static/ca6269b32115dd32ebe631dd8293298a/b5d18/1-1.jpg\"></p>\n<ul>\n<li>선언 (Declaration phase) : 변수를 실행 컨텍스트에 등록하는 단계. 이 변수 객체는 스코프가 참조하는 대상이 됩니다.</li>\n<li>초기화 (Initialization phase) : 실행 컨텍스트에 존재 하는 변수에 메모리를 만드는 단계. 이 단계에서 할당된 메모리에는 <code class=\"language-text\">undefined</code>로 초기화 됩니다.</li>\n<li>할당 (Assignment phase) : 사용자가 <code class=\"language-text\">undefined</code>로 초기화된 메모리의 다른 값을 할당하는 단계.</li>\n</ul>\n<p>var와 let/const는 이 3단계 순서에 차이가 존재한다.<br>\n<strong>var 키워드는 선언과 초기화가 한 번에 이루어지지만 let은 선언 후 일시적 사각지대에 빠지게 된다. 선언과 초기화가 분리되어 진행된다는 의미이다.</strong></p>\n<h1>var 키워드의 라이프사이클</h1>\n<p><img src=\"https://dmitripavlutin.com/static/112c5cd0c5bdd2897944d81c384a648f/32366/2.webp\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//undefined</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//hi</span></code></pre></div>\n<p><strong>var로 선언한 변수는 변수 선언전에 선언 단계와 초기화 단계를 동시에 진행한다.</strong><br>\n그래서 javascript는 실행 컨텍스트 변수 객체의 변수를 등록하고 메모리를 undefined로 만든다.<br>\n그렇기 때문에 변수 선언 전에 호출을 해도 undefined로 호출이 되는 호이스팅이 발생한다.</p>\n<h1>let 키워드의 라이프사이클</h1>\n<p><img src=\"https://dmitripavlutin.com/static/c707482b5c9368354684f45575d739d9/32366/4.webp\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Reference Error: b is not defined</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n<p>let으로 선언한 변수를 이전에 사용하려고 하면 Reference Error가 발생한다. 이를 보면 호이스팅이 발생하지 않는다고 보일 수 있다.</p>\n<p>하지만, 호이스팅이 일어나 메모리 공간을 확보한 뒤, 일시적 사각지대(TDZ) 에 빠져있는 상태이기 때문에 Reference Error가 발생하는 것이다.</p>","frontmatter":{"date":"August 30, 2021","title":"TDZ (Temporal Dead Zone)"}}},"pageContext":{"slug":"/blog/2021-08-30/","prev":{"fields":{"slug":"/blog/2021-09-04/"},"frontmatter":{"title":"VAC 패턴"}},"next":{"fields":{"slug":"/blog/2021-08-22/"},"frontmatter":{"title":"제어 컴포넌트와 비제어 컴포넌트"}}}},"staticQueryHashes":["2411212779","63159454"]}