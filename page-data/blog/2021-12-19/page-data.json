{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-12-19/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>프론트앤드 스터디에서 진행한 NPM에 대한 발표자료</p>\n</blockquote>\n<h1>NPM</h1>\n<p><img src=\"https://images.velog.io/images/nsunny0908/post/9dd61da3-b7f5-4953-bb0c-86e68bf85219/image.png\"></p>\n<p>우선, npm에 대해 설명하기 전에 모듈에 대해 좀 짚고 넘어갈 필요성이 있다.</p>\n<h1>모듈화</h1>\n<blockquote>\n<p>📂 모듈 : 애플리케이션을 구성하는 개별적 요소<br>\n모듈은 개별적으로 존재하다가 필요에 따라 명시적으로 모듈을 로드해서 사용 가능<br>\n→ 효율성, 유지보수성 ⬆️</p>\n</blockquote>\n<h1>NPM (Node Package Manager)</h1>\n<ul>\n<li>모듈들을 패키지화하여 모아둔 저장소 역할과 패키지 설치 및 관리 역할</li>\n<li>npm으로 자신이 작성한 패키지를 배포해서 공개할 수도 있고 필요한 패키지들을 검색해서 사용할 수도 있다.</li>\n</ul>\n<blockquote>\n<ol>\n<li>패키지 관리</li>\n<li>패키지의 버전관리</li>\n</ol>\n</blockquote>\n<h1>NPM 설치</h1>\n<ul>\n<li>아마 프론트앤드 개발을 하면서 터미널에 가장 많이 작성한 키워드 중에 하나일 것.</li>\n<li><code class=\"language-text\">node.js</code> 를 설치하면 자동으로 설치</li>\n</ul>\n<h1>NPM으로 모듈 다운로드하기</h1>\n<ul>\n<li>옵션을 별도로 지정하지 않으면 지역으로 설치되며, 프로젝트 루트 디렉터리에 <code class=\"language-text\">node_modules</code> 안에 패키지가 설치된다. 지역으로 설치된 패키지는 해당 프로젝트 내에서만 사용할 수 있다.</li>\n</ul>\n<h3>지역설치 (default)</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">npm install <span class=\"token punctuation\">[</span>packageName<span class=\"token punctuation\">]</span></code></pre></div>\n<h3>전역설치</h3>\n<p>전역으로 설치하면 모든 프로젝트에서 사용가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">npm install <span class=\"token operator\">-</span>g <span class=\"token punctuation\">[</span>packageName<span class=\"token punctuation\">]</span></code></pre></div>\n<h1>Package.json</h1>\n<p><code class=\"language-text\">npm init</code></p>\n<ul>\n<li>프로젝트에서는 많은 패키지를 사용하게 되고 패키지의 버전도 빈번하게 업데이트되므로 프로젝트가 의존하고 있는 패키지를 일괄 관리할 필요가 있다.<br>\nnpm은 <code class=\"language-text\">package.json</code> 파일을 통해서 프로젝트 정보와 패키지의 의존성(dependency)을 관리한다. 이미 작성된 package.json이 있다면 팀 내에 배포하여 동일한 개발 환경을 빠르게 구축할 수 있는 장점이 있다.</li>\n</ul>\n<blockquote>\n<p>🧾 모듈들의 버전을 명시한 명세서</p>\n</blockquote>\n<h3>dependencies vs devDependencies</h3>\n<p><img src=\"https://images.velog.io/images/nsunny0908/post/b82c0e34-0f69-4bbb-bde8-df994e39db09/image.png\"></p>\n<ul>\n<li><code class=\"language-text\">dependencies</code> : <strong>프로덕션 환경</strong>에서 응용 프로그램에 필요한 패키지.</li>\n<li><code class=\"language-text\">devDependencies</code>: <strong>로컬 개발 및 테스트</strong>에만 필요한 패키지.</li>\n</ul>\n<h3>package.json vs package.lock.json</h3>\n<p><img src=\"https://images.velog.io/images/nsunny0908/post/613b07c0-7ca7-4cd3-88be-e2fef5e2ea6d/image.png\"></p>\n<ul>\n<li><code class=\"language-text\">package.json</code>: version range (버전의 범위를 명시)</li>\n</ul>\n<blockquote>\n<p>🌳 개발자들이 서로 같은 node_modules 트리를 갖도록 하는 역할</p>\n</blockquote>\n<h3>scripts</h3>\n<ul>\n<li>우리가 <code class=\"language-text\">run</code> 명령어를 통해서 실행할 것들을 적어두는 것</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run dev\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"hello-world\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo 'Hello World'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write --config ./prettier.config.js './src/**/*.{ts,tsx}'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint './src/**/*.{ts,tsx,js,jsx}'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint:fix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --fix './src/**/*.{ts,tsx,js,jsx}'\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h1>NPM 배포하기</h1>\n<ol>\n<li>배포가 가능한 패키지명인지 확인</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">npm info <span class=\"token punctuation\">[</span>packageName<span class=\"token punctuation\">]</span></code></pre></div>\n<ol start=\"2\">\n<li>필요한 정보 입력 (version, description...)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">npm init</code></pre></div>\n<ol start=\"3\">\n<li>로그인</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">npm login</code></pre></div>\n<ol start=\"4\">\n<li>npmignore</li>\n<li>배포</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">npm publish</code></pre></div>\n<ul>\n<li>버전관리 (<code class=\"language-text\">Semver</code>: Semantic Versioning)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">npm version major   # package.json파일 version의 첫 번째 숫자 (v1.<span class=\"token number\">0.0</span> -> v2.<span class=\"token number\">0.0</span>)\nnpm version minor   # package.json파일 version의 두 번째 숫자 (v1.<span class=\"token number\">0.0</span> -> v1.<span class=\"token number\">1.0</span>)\nnpm version patch   # package.json파일 version의 세 번째 숫자 (v1.<span class=\"token number\">0.0</span> -> v1.<span class=\"token number\">0.1</span>)</code></pre></div>\n<h1>NPM vs yarn</h1>\n<p>npm을 대응하는 오픈소스 라이브러리 중에는 여러가지가 있는데 그 중에 가장 유명하고 사람들이 많이 사용하는게 <code class=\"language-text\">yarn</code></p>\n<h3>yarn과의 차이점</h3>\n<ol>\n<li>속도\n→ yarn은 병렬 처리</li>\n<li>보안\n→ npm은 의존 관계를 가지는 다른 패키지들이 즉시 포함되도록 한다.\n반면 yarn은 yarn.lock이나 package.json 파일에 있는 것들만 설치를 한다.</li>\n</ol>","frontmatter":{"date":"December 19, 2021","title":"NPM"}}},"pageContext":{"slug":"/blog/2021-12-19/","prev":{"fields":{"slug":"/about/"},"frontmatter":{"title":"About"}},"next":{"fields":{"slug":"/blog/2021-11-25/"},"frontmatter":{"title":"Custom hook vs Function"}}}},"staticQueryHashes":["2411212779","63159454"]}