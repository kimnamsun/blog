{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-11-25/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>popover 컴포넌트에서 Position 값을 받아 방향에 따라 ref의 style값을 조정하는 함수를 만드는 중에 일어난 일이다.<br>\n💁🏻‍♂️ : 이거 왜 커스텀훅으로 안만들고 함수로 만드셨나요?<br>\n🙍🏻‍♀️(나) : (..)<br>\n그래서 정리해보고자 하는 글!<br>\n어떨 때 우리는 custom hook을 사용하고 어떨 때 함수를 사용해야하는 걸까?</p>\n</blockquote>\n<h1>Custom hook이란?</h1>\n<p>반복되는 훅 활용 코드들을 자신만의 hook으로 만들어서 컴포넌트 로직을 함수로 뽑아내어 재사용할 수 있는 것.<br>\ncustom hook의 이름은 무조건 <code class=\"language-text\">use</code>로 시작해야한다.\n(ex. useForm ..)</p>\n<h1>어떨때 Custom hook을 사용하면 좋을까?</h1>\n<ol>\n<li>DOM에 대한 직접적인 조작이 있을때</li>\n<li>사이드 이펙트가 있을때 (useRef, useEffect …)</li>\n<li>상태값을 가질때</li>\n</ol>\n<h1>function 으로 만든 이유</h1>\n<ol>\n<li>최상단에서 호출되므로 close일때도 훅이 호출된다.</li>\n<li>파라미터를 전달받고 x, y값을 리턴하는 용도로만 사용되므로 순수함수에 가깝다.<br>\n(동일한 파라미터를 전달했을때 동일한 return값이 나온다.)</li>\n</ol>\n<h1>결론</h1>\n<p>무조건 커스텀훅으로 만들지 말고 일반 함수로도 충분하다면 일반 함수로 만들자.</p>","frontmatter":{"date":"November 25, 2021","title":"Custom hook vs Function"}}},"pageContext":{"slug":"/blog/2021-11-25/","prev":{"fields":{"slug":"/blog/2021-12-19/"},"frontmatter":{"title":"NPM"}},"next":{"fields":{"slug":"/blog/2021-10-05/"},"frontmatter":{"title":"patch-package로 외부 라이브러리 수정해서 사용하기"}}}},"staticQueryHashes":["2411212779","63159454"]}