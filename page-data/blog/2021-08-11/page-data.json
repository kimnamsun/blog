{"componentChunkName":"component---src-layouts-post-js","path":"/blog/2021-08-11/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>개발을 하다보면, <code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code>가 아닌 경우를 판별해야하는 경우가 굉장히 많다.\n그럴때 유용하게 쓸 수 있는 <code class=\"language-text\">null</code> 병합 연산자에 대해 알아보자!</p>\n</blockquote>\n<h1>null 병합 연산자 (??)</h1>\n<blockquote>\n<p>왼쪽 피연산자가 <code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code>일 때는 오른쪽 피연산자를 리턴하고,그렇지 않으면 (즉, 확정된 값이 있다면) 왼쪽 피연산자를 리턴하는 논리 연산자</p>\n</blockquote>\n<p>예를 들어, a가 <code class=\"language-text\">null</code> 혹은 <code class=\"language-text\">undefined</code>가 아닌 경우에는 a를 리턴하고, 그 외의 경우에는 b를 리턴하는 코드를 작성한다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">a <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b</code></pre></div>\n<p>이런식으로 작성할 수 있을 것이다.\n동일한 작동을 하는 코드를 null 병합 연산자를 사용해 작성하면 이렇게 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">a <span class=\"token operator\">??</span> b</code></pre></div>\n<ul>\n<li>a가 <code class=\"language-text\">null</code> 혹은 <code class=\"language-text\">undefined</code>가 아닌 경우 : a 리턴</li>\n<li>그 외의 경우 : b 리턴</li>\n</ul>\n<p>좀 더 구체적인 예와 함께 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"value\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// value</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"value\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// value</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"value\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p>그렇다면 비슷한 동작을 하는 <code class=\"language-text\">||</code> 연산자와는 어떻게 다른 것일까?</p>\n<h1>or 연산자 (||)와의 차이</h1>\n<p>null 병합 연산자는 or 연산자 <code class=\"language-text\">||</code>와 비슷하지만 차이가 있다.</p>\n<p><code class=\"language-text\">||</code>는 첫 번째 <code class=\"language-text\">truthy</code> 값을 리턴한다.\n<code class=\"language-text\">??</code>는 첫 번째 <code class=\"language-text\">정의된(defined)</code> 값을 리턴한다.</p>\n<p><code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>, 숫자 <code class=\"language-text\">0</code>을 구별해서 다뤄야할때 사용된다.\n예를 들자면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">??</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">||</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'value'</span></code></pre></div>\n<p>변수 a가 <code class=\"language-text\">0</code>인 경우, <code class=\"language-text\">??</code>를 사용하면 a의 값인 0이 리턴되지만 <code class=\"language-text\">||</code>를 사용하면 b의 값인 'value'가 리턴된다.</p>\n<h1>Optional chaining 연산자(?.)와의 관계</h1>\n<p>null 병합 연산자는 명확한 값으로 <code class=\"language-text\">undefined</code>과 <code class=\"language-text\">null</code>을 처리하고, optional chaining 연산자는 <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>일 수 있는 객체의 속성에 접근할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sayHi<span class=\"token operator\">:</span> <span class=\"token string\">\"hi\"</span> <span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>sayHi<span class=\"token operator\">?.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"HI\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>sayBye<span class=\"token operator\">?.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>sayBye<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError</span></code></pre></div>","frontmatter":{"date":"August 11, 2021","title":"null 병합 연산자(nullish coalescing operator)"}}},"pageContext":{"slug":"/blog/2021-08-11/","prev":{"fields":{"slug":"/blog/2021-08-12/"},"frontmatter":{"title":"\"함수 컴포넌트\"와 \"함수형 컴포넌트\"가 같은 말이라고 생각하시나요?"}},"next":{"fields":{"slug":"/blog/2021-07-04/"},"frontmatter":{"title":"Prototype"}}}},"staticQueryHashes":["2411212779","63159454"]}