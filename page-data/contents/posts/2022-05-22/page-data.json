{"componentChunkName":"component---src-templates-post-jsx","path":"/contents/posts/2022-05-22/","result":{"data":{"site":{"siteMetadata":{"title":"kimnamsun"}},"markdownRemark":{"id":"279cb68d-a1a3-5ee4-b743-784d2bf365c5","excerpt":"가장 먼저!\n프론트앤드 개발자가 개발하는 방식 생각해보기 디자이너가 전달해준 디자인을 보고 마크업을 시작한다. 브라우저에서 렌더링된 결과를 확인하는 과정을 거친다. 필요한 기능의 요구사항을 확인한 후 기능을 추가한다. 제대로 동작하는지 브라우저에서 확인한다. 기존의 코드를 리팩토링한다. 리팩토링 전과 동일하게 동작하는지 확인한다. -> 사실 우리는 테스트…","html":"<p>가장 먼저!\n프론트앤드 개발자가 개발하는 방식 생각해보기</p>\n<blockquote>\n<ol>\n<li>디자이너가 전달해준 디자인을 보고 마크업을 시작한다.</li>\n<li>브라우저에서 렌더링된 결과를 확인하는 과정을 거친다.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol>\n<li>필요한 기능의 요구사항을 확인한 후 기능을 추가한다.</li>\n<li>제대로 동작하는지 브라우저에서 확인한다.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol>\n<li>기존의 코드를 리팩토링한다.</li>\n<li>리팩토링 전과 동일하게 동작하는지 확인한다.</li>\n</ol>\n</blockquote>\n<p>-> 사실 우리는 테스트와 개발을 동시에 하고, 어쩌면 테스트를 하는데 더 많은 시간을 사용한다.</p>\n<h1>테스트란?</h1>\n<p>\" 프로그램을 실행하여 오류와 결함을 검출하고 애플리케이션이 요구사항에 맞게 동작하는지 검증하는 절차 \"</p>\n<h1>우리는 테스트를 왜 해야하는가</h1>\n<blockquote>\n<ol>\n<li>발생 가능한 결함을 예방하고 요구사항을 충족시키는지 확인</li>\n<li>개발 과정에서 생기는 변경 사항들로 인해 새로운 결함이 유입되지 않았는지 확인</li>\n</ol>\n</blockquote>\n<p>테스트를 통해서 불필요한 버그가 없는 코드를 작성할 수 있고,\n좋은 코드를 자신있게 작성할 수 있게 된다.</p>\n<p>그러나 가장 큰 문제가 있다.</p>\n<h2>\"테스트에는 너무 많은 시간과 노력이 필요하다.\"</h2>\n<p><img src=\"https://velog.velcdn.com/images/nsunny0908/post/0d8089ef-a866-46c9-b489-13c5e564fdbd/image.png\"></p>\n<h2>Write test</h2>\n<p>새벽 2시에 전화받고 버그를 수정하는 것보다 테스트에서 버그를 잡는 것이 훨씬 낫다.</p>\n<p>테스트를 작성하는게 구현하는것보다 시간이 더 걸릴 수도 있지만 확실하게 유지보수하는 시간을 절약할 수 있다.</p>\n<p>테스트를 작성할 때 생각해야 하는 것은 <strong>테스트로 인해 이 프로젝트에 버그가 없다는 확신을 얼마나 가져오는가</strong>에 대한 것이다.</p>\n<p>TypeScript와 ESLint와 같은 언어와 도구를 사용하면 좋지만, 이것들은 비즈니스 로직에 버그가 없다고 보장해주지 않기 때문에 테스트를 작성해야 한다.</p>\n<h2>Not too many</h2>\n<p>테스트 커버리지가 70%이상일 경우, 오히려 테스트에서 감소하는 수익을 얻는다.</p>\n<p>테스트 환경에서 재현하기 어려운 한 줄의 코드를 테스트 통과 시키기 위해 구현되는 세부적인 것들을 테스트하고 있을 수도 있다.</p>\n<h2>Mostly integration</h2>\n<p>테스팅 트로피: 소프트웨어 테스트를 위한 4계층의 검증된 방법\n<img src=\"https://velog.velcdn.com/images/nsunny0908/post/28e3a427-096d-4cdf-9f11-4d81e56f079d/image.png\"></p>\n<h2>테스팅 트로피로 알아보는 테스트의 유형</h2>\n<ul>\n<li>Static Test (정적 테스트) - 코드를 실행시키지 않고 하는 테스트\n오타, 참조에러, 타입에러 등 개발자의 실수로 발생할 수 있는 에러를 잡아준다.\nESLint, Typescript</li>\n<li>Unit Test (단위 테스트)\n작은 단위를 떼어내서 테스트\n함수/클래스같은 개별 유닛에 값을 넣고 예상한 값이 나오게 하도록 테스트한다.</li>\n<li>Integration Test (통합 테스트)\n여러 부분들이 통합되어 어떤 side effect가 있는지 등을 포함해 원하는 결과가 나오도록 테스트한다.</li>\n<li>E2E Test\n사용자 시나리오대로 테스트했을 때 해당 제품이 잘 돌아가는지 테스트한다.</li>\n</ul>\n<p>마틴 파울러가 설명한 테스트의 단계\n<img src=\"https://velog.velcdn.com/images/nsunny0908/post/5930470f-9a95-4a77-98f1-c4538389c8c2/image.png\"></p>\n<p>E2E 테스트는 가장 느리며, 비용이 많이 드는 반면 Unit 테스트는 가장 저렴하며 빠르다.</p>\n<p>그러나 Unit Test만 하면 UI테스트의 이점을 가져갈 수 없다.</p>\n<p>UI테스트와 Unit테스트의 중간 특성을 지닌 통합테스트를 위주로 작성하자.\n왜 통합테스트가 중요할까?\n<a href=\"https://twitter.com/erinfranmc/status/1148986961207730176\">https://twitter.com/erinfranmc/status/1148986961207730176</a>\n→ 유닛이 개별적으로 작동하는지 확인하는 유닛 테스트가 중요하지 않다는 것은 아니지만 제대로 함께 작동하는지 확인하지 않으면 아무 소용이 없다.</p>\n<p><strong>통합 테스트는 자신감과 속도/비용 간의 균형을 훌륭하게 유지하는 테스트이다.</strong></p>\n<h1>프론트앤드 관점에서의 테스트</h1>\n<p>프론트앤드 개발자가 뭘 하는 개발자인지 생각해보면 그 답은 명확해진다.</p>\n<ol>\n<li>\n<p>시각적 요소\n입력값 (사용자의 액션), 출력값 (사용자의 액션에 따른 화면의 변화)를 검증</p>\n<ul>\n<li>스냅샷 테스트\nHTML구조가 의도한 대로 나타나는지를 테스트</li>\n<li>시각적 회귀 테스트\nHTML에 CSS를 더해서 컴포넌트가 실제로 브라우저에서 렌더링되는 모습이 의도한 대로 나타나는지를 테스트\nstorybook, chromatic</li>\n</ul>\n</li>\n<li>사용자 이벤트 처리</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> userEvent <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/user-event\"</span>\n\nuserEvent<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">\"인풋에 입력\"</span><span class=\"token punctuation\">)</span>\nuserEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"3\">\n<li>API 통신\n보통 mocking하여 사용</li>\n<li>mocking : 해당 코드가 의존하는 부분을 가짜(mock)로 대체하는 기법</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns undefined by default\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 함수 인스턴스를 만듦.</span>\n  <span class=\"token keyword\">const</span> mock <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// mock 함수에 foo라는 인자를 전달해줌.</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeUndefined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doAdd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calls callback with arguments added\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mockCallback <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">doAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> mockCallback<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1>테스트 개발론</h1>\n<h2>TDD (Test-Driven-Development)</h2>\n<p><img src=\"https://velog.velcdn.com/images/nsunny0908/post/6f82d765-c955-48c2-ae0b-71d009004dd8/image.png\"></p>\n<ul>\n<li>테스트를 먼저 작성하는 테스트 주도 개발</li>\n<li>궁극적 목표 : Clean Code that works (작동하는 깔끔한 코드)</li>\n<li>어떻게 Testable Code를 작성할 수 있을까?\n→ <strong>관심사의 분리</strong></li>\n</ul>\n<p><a href=\"https://youtu.be/L1dtkLeIz-M\">[A5] 프론트엔드에서 TDD가 가능하다는 것을 보여드립니다.</a></p>\n<h2>BDD (Behavior-Driven-Development)</h2>\n<ul>\n<li>TDD에서 확장</li>\n<li>애플리케이션의 동작에 초점을 맞추는 행위 주도 개발</li>\n<li>시나리오를 기반으로 테스트 케이스를 작성</li>\n</ul>\n<h3>given-when-then</h3>\n<ul>\n<li>테스트 시나리오 작성을 세 섹션(given, when, then)으로 나누는 것</li>\n</ul>\n<p>given: 동작 작동 전에 필요한 것들을 설명\nwhen: 동작\nthen: 동작으로 인해 예상되는 변경 사항에 대한 설명</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;SearchInput />\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"검색 인풋이 렌더링 된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token keyword\">const</span> placeholderText <span class=\"token operator\">=</span> <span class=\"token string\">\"test searchInput\"</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>SearchInput placeholder<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>placeholderText<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> $input <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByDisplayValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> $icon <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"search\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>$input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByPlaceholderText</span><span class=\"token punctuation\">(</span>placeholderText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>$icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"검색 인풋에 오토포커싱 한다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token keyword\">const</span> autoFocus <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>SearchInput autoFocus<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>autoFocus<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> $input <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByDisplayValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>$input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"유저 입력 후 엔터를 눌렀을 때 검색기능이 동작한다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token keyword\">const</span> handleSearch <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> inputValue <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>SearchInput onSearch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSearch<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> $input <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByDisplayValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n    userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>$input<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>inputValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">{enter}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>handleSearch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>expect<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inputValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"프론트앤드에서의 테스트 (나에겐 너무나 멀고 힘든 테스트코드 짜기..)","date":"May 22, 2022"},"fields":{"slug":"/contents/posts/2022-05-22/","readingTime":{"minutes":8.575}}},"seriesList":{"edges":[{"node":{"id":"5267d72c-500b-59e9-9927-51ccdcf24b4a","fields":{"slug":"/contents/posts/2020-12-24/"},"frontmatter":{"title":"사진학도가 개발자가 된 이유"}}},{"node":{"id":"7a575c97-2286-5eb3-9a4e-df5412bfb335","fields":{"slug":"/contents/posts/2021-05-10/"},"frontmatter":{"title":"Intersection Observer API를 활용한 무한스크롤"}}},{"node":{"id":"0f295bb2-6a3c-511b-99d3-3d903307287d","fields":{"slug":"/contents/posts/2021-05-17/"},"frontmatter":{"title":"기술을 할 것인가, 예술을 할 것인가"}}},{"node":{"id":"9f0c0170-6efd-5ba0-b3b2-7130bedea7a0","fields":{"slug":"/contents/posts/2021-06-13/"},"frontmatter":{"title":"코딩 부트캠프와 좋은 개발자"}}},{"node":{"id":"3809cc24-7495-5555-925d-dc49258ffc52","fields":{"slug":"/contents/posts/2021-07-04/"},"frontmatter":{"title":"Prototype"}}},{"node":{"id":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d","fields":{"slug":"/contents/posts/2021-08-11/"},"frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)"}}},{"node":{"id":"5e2b28f0-928d-5111-af17-8be7fbe9ec39","fields":{"slug":"/contents/posts/2021-08-12/"},"frontmatter":{"title":"\"함수 컴포넌트\"와 \"함수형 컴포넌트\"가 같은 말이라고 생각하시나요?"}}},{"node":{"id":"80af794d-6d8b-57a1-a2d1-64b3e3b98fa7","fields":{"slug":"/contents/posts/2021-08-16/"},"frontmatter":{"title":"React Context Api"}}},{"node":{"id":"6ce9e47c-23b4-5026-bed6-116351eb8aee","fields":{"slug":"/contents/posts/2021-08-21/"},"frontmatter":{"title":"React Portal"}}},{"node":{"id":"88cdf508-0abb-5014-8d70-e65d35c6d884","fields":{"slug":"/contents/posts/2021-08-22/"},"frontmatter":{"title":"제어 컴포넌트와 비제어 컴포넌트"}}},{"node":{"id":"0d93f1f5-2ccc-54b6-b943-7179687ac266","fields":{"slug":"/contents/posts/2021-08-30/"},"frontmatter":{"title":"TDZ (Temporal Dead Zone)"}}},{"node":{"id":"457d0b1b-3d90-5eea-a66f-8587373ab7c6","fields":{"slug":"/contents/posts/2021-09-04/"},"frontmatter":{"title":"VAC 패턴"}}},{"node":{"id":"b0b1c6d8-47d0-5edf-9261-25d3a5a75ad2","fields":{"slug":"/contents/posts/2021-09-09/"},"frontmatter":{"title":"Typescript Alias 설정시 마주친 오류"}}},{"node":{"id":"c2550142-36f4-5398-a554-702b8fa1b6b8","fields":{"slug":"/contents/posts/2021-10-05/"},"frontmatter":{"title":"patch-package로 외부 라이브러리 수정해서 사용하기"}}},{"node":{"id":"36da5bac-6acc-5daa-b307-4a9fdc74542f","fields":{"slug":"/contents/posts/2021-11-25/"},"frontmatter":{"title":"Custom hook vs Function"}}},{"node":{"id":"2a55cc9e-c79c-5a4d-ac53-a0d36cc69597","fields":{"slug":"/contents/posts/2021-12-19/"},"frontmatter":{"title":"NPM"}}},{"node":{"id":"6d5384bb-c04f-5cc7-945c-5aea5380bb94","fields":{"slug":"/contents/posts/2021-12-31/"},"frontmatter":{"title":"2021년 회고"}}},{"node":{"id":"745a2241-d9b5-5ce0-b6fd-f2a66699554d","fields":{"slug":"/contents/posts/2022-01-05/"},"frontmatter":{"title":":focus-within"}}},{"node":{"id":"b794f451-f15c-5011-8dba-34a5b533b144","fields":{"slug":"/contents/posts/2022-02-28/"},"frontmatter":{"title":"div에서 placeholder 사용하기 (styled-component)"}}},{"node":{"id":"7c078298-d430-54a2-a954-63a6687c7328","fields":{"slug":"/contents/posts/2022-03-13/"},"frontmatter":{"title":"Tooltip component 트러블 슈팅"}}},{"node":{"id":"f1e4e298-5cae-5a57-8798-17ababf157e0","fields":{"slug":"/contents/posts/2022-04-01/"},"frontmatter":{"title":"OSI 7계층 중 1계층에 대해서 알아보자"}}},{"node":{"id":"279cb68d-a1a3-5ee4-b743-784d2bf365c5","fields":{"slug":"/contents/posts/2022-05-22/"},"frontmatter":{"title":"프론트앤드에서의 테스트 (나에겐 너무나 멀고 힘든 테스트코드 짜기..)"}}},{"node":{"id":"83ff9034-42a0-5267-bc2b-d710f2446cff","fields":{"slug":"/contents/posts/2022-06-05/"},"frontmatter":{"title":"debounce 트러블 슈팅"}}},{"node":{"id":"796731f6-1035-5bb8-ac76-467aae3fa171","fields":{"slug":"/contents/posts/2022-06-11/"},"frontmatter":{"title":"Object Delete"}}},{"node":{"id":"bbb421e5-8831-5038-a552-96243600d346","fields":{"slug":"/contents/posts/2022-06-25/"},"frontmatter":{"title":"Modal esc 관련 트러블 슈팅"}}},{"node":{"id":"df7ea411-5375-56e2-8ce9-4f86bb631af7","fields":{"slug":"/contents/posts/2022-07-20/"},"frontmatter":{"title":"OSI 7계층 중 2계층에 대해서 알아보자"}}},{"node":{"id":"bd139eae-9fe0-53cd-9205-95f18d33e90d","fields":{"slug":"/contents/posts/2022-08-17/"},"frontmatter":{"title":"페이지네이션 검색 관련 트러블슈팅"}}},{"node":{"id":"a8bfc1a9-ef8f-554f-8caf-5c17a027f52a","fields":{"slug":"/contents/posts/2022-09-10/"},"frontmatter":{"title":"이제 deep copy할 때 structuredClone을 씁시다."}}},{"node":{"id":"0cabe0ee-d57f-5cc9-8402-1a960f86eed7","fields":{"slug":"/contents/posts/2022-09-12/"},"frontmatter":{"title":"javascript class와 private 속성"}}},{"node":{"id":"3a533e42-a168-5aad-bb6b-0bee817a94cd","fields":{"slug":"/contents/posts/2022-09-24/"},"frontmatter":{"title":"TypeScript의 Soundness와 Type Assertion (as 떡칠하지 말자..)"}}},{"node":{"id":"9f1a0f31-42b4-5c43-8baa-c5973a1a5281","fields":{"slug":"/contents/posts/2022-09-28/"},"frontmatter":{"title":"어쩐지 yarn으로 패키지 설치할 때 오류가 났다.."}}},{"node":{"id":"74180524-c983-5af9-810b-e70418f145a5","fields":{"slug":"/contents/posts/2022-10-06/"},"frontmatter":{"title":"storybook addon 안보일때"}}},{"node":{"id":"a9317839-66e0-5734-a125-5266ac700f9f","fields":{"slug":"/contents/posts/2022-12-31/"},"frontmatter":{"title":"2022년 회고"}}},{"node":{"id":"e0593ebb-38b6-5d5b-bd37-63a6740ea2e8","fields":{"slug":"/contents/posts/2023-07-05/"},"frontmatter":{"title":"get image api 오류 트러블 슈팅"}}},{"node":{"id":"a5ffa0e0-ac0f-592c-a606-ef5545b8d5f5","fields":{"slug":"/contents/posts/2023-08-05/"},"frontmatter":{"title":"The Progressive JavaScript Framework"}}},{"node":{"id":"dba241d0-3594-5a1d-a854-be8184071124","fields":{"slug":"/contents/posts/2023-08-13/"},"frontmatter":{"title":"why can’t use window in vue template?"}}},{"node":{"id":"3bfdd15b-b1ae-57eb-98d8-ac40ffe55a63","fields":{"slug":"/contents/posts/2023-08-25/"},"frontmatter":{"title":"처음 남의 코드를 받으면 뭘 해야할까?"}}},{"node":{"id":"f399c871-2d22-5b62-ae86-75e0aa456d6d","fields":{"slug":"/contents/posts/2023-08-27/"},"frontmatter":{"title":"동물의 숲 짤 생성기를 만들었다"}}},{"node":{"id":"a78e398b-f8c7-56c1-a2c0-deedd720557b","fields":{"slug":"/contents/posts/2023-09-17/"},"frontmatter":{"title":"신뢰할 수 없는 코드를 쓰면서 불변성 지키기"}}}]},"previous":{"fields":{"slug":"/contents/posts/2022-04-01/"},"frontmatter":{"title":"OSI 7계층 중 1계층에 대해서 알아보자"}},"next":{"fields":{"slug":"/contents/posts/2022-06-05/"},"frontmatter":{"title":"debounce 트러블 슈팅"}}},"pageContext":{"id":"279cb68d-a1a3-5ee4-b743-784d2bf365c5","series":null,"previousPostId":"f1e4e298-5cae-5a57-8798-17ababf157e0","nextPostId":"83ff9034-42a0-5267-bc2b-d710f2446cff"}},"staticQueryHashes":[],"slicesMap":{}}