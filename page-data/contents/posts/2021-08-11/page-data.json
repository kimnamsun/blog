{"componentChunkName":"component---src-templates-post-jsx","path":"/contents/posts/2021-08-11/","result":{"data":{"site":{"siteMetadata":{"title":"kimnamsun"}},"markdownRemark":{"id":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d","excerpt":"개발을 하다보면,  또는 가 아닌 경우를 판별해야하는 경우가 굉장히 많다.\n그럴때 유용하게 쓸 수 있는  병합 연산자에 대해 알아보자! null 병합 연산자 (??) 왼쪽 피연산자가  또는 일 때는 오른쪽 피연산자를 리턴하고,그렇지 않으면 (즉, 확정된 값이 있다면) 왼쪽 피연산자를 리턴하는 논리 연산자 예를 들어, a가  혹은 가 아닌 경우에는 a를 리…","html":"<blockquote>\n<p>개발을 하다보면, <code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code>가 아닌 경우를 판별해야하는 경우가 굉장히 많다.\n그럴때 유용하게 쓸 수 있는 <code class=\"language-text\">null</code> 병합 연산자에 대해 알아보자!</p>\n</blockquote>\n<h1>null 병합 연산자 (??)</h1>\n<blockquote>\n<p>왼쪽 피연산자가 <code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code>일 때는 오른쪽 피연산자를 리턴하고,그렇지 않으면 (즉, 확정된 값이 있다면) 왼쪽 피연산자를 리턴하는 논리 연산자</p>\n</blockquote>\n<p>예를 들어, a가 <code class=\"language-text\">null</code> 혹은 <code class=\"language-text\">undefined</code>가 아닌 경우에는 a를 리턴하고, 그 외의 경우에는 b를 리턴하는 코드를 작성한다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">a <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b</code></pre></div>\n<p>이런식으로 작성할 수 있을 것이다.\n동일한 작동을 하는 코드를 null 병합 연산자를 사용해 작성하면 이렇게 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">a <span class=\"token operator\">??</span> b</code></pre></div>\n<ul>\n<li>a가 <code class=\"language-text\">null</code> 혹은 <code class=\"language-text\">undefined</code>가 아닌 경우 : a 리턴</li>\n<li>그 외의 경우 : b 리턴</li>\n</ul>\n<p>좀 더 구체적인 예와 함께 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"value\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// value</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"value\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// value</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"value\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p>그렇다면 비슷한 동작을 하는 <code class=\"language-text\">||</code> 연산자와는 어떻게 다른 것일까?</p>\n<h1>or 연산자 (||)와의 차이</h1>\n<p>null 병합 연산자는 or 연산자 <code class=\"language-text\">||</code>와 비슷하지만 차이가 있다.</p>\n<p><code class=\"language-text\">||</code>는 첫 번째 <code class=\"language-text\">truthy</code> 값을 리턴한다.\n<code class=\"language-text\">??</code>는 첫 번째 <code class=\"language-text\">정의된(defined)</code> 값을 리턴한다.</p>\n<p><code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>, 숫자 <code class=\"language-text\">0</code>을 구별해서 다뤄야할때 사용된다.\n예를 들자면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">??</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">||</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'value'</span></code></pre></div>\n<p>변수 a가 <code class=\"language-text\">0</code>인 경우, <code class=\"language-text\">??</code>를 사용하면 a의 값인 0이 리턴되지만 <code class=\"language-text\">||</code>를 사용하면 b의 값인 'value'가 리턴된다.</p>\n<h1>Optional chaining 연산자(?.)와의 관계</h1>\n<p>null 병합 연산자는 명확한 값으로 <code class=\"language-text\">undefined</code>과 <code class=\"language-text\">null</code>을 처리하고, optional chaining 연산자는 <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>일 수 있는 객체의 속성에 접근할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hi\"</span> <span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>sayHi<span class=\"token operator\">?.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"HI\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>sayBye<span class=\"token operator\">?.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>sayBye<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError</span></code></pre></div>","frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)","date":"August 11, 2021"},"fields":{"slug":"/contents/posts/2021-08-11/","readingTime":{"minutes":2.695}}},"seriesList":{"edges":[{"node":{"id":"5267d72c-500b-59e9-9927-51ccdcf24b4a","fields":{"slug":"/contents/posts/2020-12-24/"},"frontmatter":{"title":"사진학도가 개발자가 된 이유"}}},{"node":{"id":"7a575c97-2286-5eb3-9a4e-df5412bfb335","fields":{"slug":"/contents/posts/2021-05-10/"},"frontmatter":{"title":"Intersection Observer API를 활용한 무한스크롤"}}},{"node":{"id":"0f295bb2-6a3c-511b-99d3-3d903307287d","fields":{"slug":"/contents/posts/2021-05-17/"},"frontmatter":{"title":"기술을 할 것인가, 예술을 할 것인가"}}},{"node":{"id":"9f0c0170-6efd-5ba0-b3b2-7130bedea7a0","fields":{"slug":"/contents/posts/2021-06-13/"},"frontmatter":{"title":"코딩 부트캠프와 좋은 개발자"}}},{"node":{"id":"3809cc24-7495-5555-925d-dc49258ffc52","fields":{"slug":"/contents/posts/2021-07-04/"},"frontmatter":{"title":"Prototype"}}},{"node":{"id":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d","fields":{"slug":"/contents/posts/2021-08-11/"},"frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)"}}},{"node":{"id":"5e2b28f0-928d-5111-af17-8be7fbe9ec39","fields":{"slug":"/contents/posts/2021-08-12/"},"frontmatter":{"title":"\"함수 컴포넌트\"와 \"함수형 컴포넌트\"가 같은 말이라고 생각하시나요?"}}},{"node":{"id":"80af794d-6d8b-57a1-a2d1-64b3e3b98fa7","fields":{"slug":"/contents/posts/2021-08-16/"},"frontmatter":{"title":"React Context Api"}}},{"node":{"id":"6ce9e47c-23b4-5026-bed6-116351eb8aee","fields":{"slug":"/contents/posts/2021-08-21/"},"frontmatter":{"title":"React Portal"}}},{"node":{"id":"88cdf508-0abb-5014-8d70-e65d35c6d884","fields":{"slug":"/contents/posts/2021-08-22/"},"frontmatter":{"title":"제어 컴포넌트와 비제어 컴포넌트"}}},{"node":{"id":"0d93f1f5-2ccc-54b6-b943-7179687ac266","fields":{"slug":"/contents/posts/2021-08-30/"},"frontmatter":{"title":"TDZ (Temporal Dead Zone)"}}},{"node":{"id":"457d0b1b-3d90-5eea-a66f-8587373ab7c6","fields":{"slug":"/contents/posts/2021-09-04/"},"frontmatter":{"title":"VAC 패턴"}}},{"node":{"id":"b0b1c6d8-47d0-5edf-9261-25d3a5a75ad2","fields":{"slug":"/contents/posts/2021-09-09/"},"frontmatter":{"title":"Typescript Alias 설정시 마주친 오류"}}},{"node":{"id":"c2550142-36f4-5398-a554-702b8fa1b6b8","fields":{"slug":"/contents/posts/2021-10-05/"},"frontmatter":{"title":"patch-package로 외부 라이브러리 수정해서 사용하기"}}},{"node":{"id":"36da5bac-6acc-5daa-b307-4a9fdc74542f","fields":{"slug":"/contents/posts/2021-11-25/"},"frontmatter":{"title":"Custom hook vs Function"}}},{"node":{"id":"2a55cc9e-c79c-5a4d-ac53-a0d36cc69597","fields":{"slug":"/contents/posts/2021-12-19/"},"frontmatter":{"title":"NPM"}}},{"node":{"id":"6d5384bb-c04f-5cc7-945c-5aea5380bb94","fields":{"slug":"/contents/posts/2021-12-31/"},"frontmatter":{"title":"2021년 회고"}}},{"node":{"id":"745a2241-d9b5-5ce0-b6fd-f2a66699554d","fields":{"slug":"/contents/posts/2022-01-05/"},"frontmatter":{"title":":focus-within"}}},{"node":{"id":"b794f451-f15c-5011-8dba-34a5b533b144","fields":{"slug":"/contents/posts/2022-02-28/"},"frontmatter":{"title":"div에서 placeholder 사용하기 (styled-component)"}}},{"node":{"id":"7c078298-d430-54a2-a954-63a6687c7328","fields":{"slug":"/contents/posts/2022-03-13/"},"frontmatter":{"title":"Tooltip component 트러블 슈팅"}}},{"node":{"id":"f1e4e298-5cae-5a57-8798-17ababf157e0","fields":{"slug":"/contents/posts/2022-04-01/"},"frontmatter":{"title":"OSI 7계층 중 1계층에 대해서 알아보자"}}},{"node":{"id":"279cb68d-a1a3-5ee4-b743-784d2bf365c5","fields":{"slug":"/contents/posts/2022-05-22/"},"frontmatter":{"title":"프론트앤드에서의 테스트 (나에겐 너무나 멀고 힘든 테스트코드 짜기..)"}}},{"node":{"id":"83ff9034-42a0-5267-bc2b-d710f2446cff","fields":{"slug":"/contents/posts/2022-06-05/"},"frontmatter":{"title":"debounce 트러블 슈팅"}}},{"node":{"id":"796731f6-1035-5bb8-ac76-467aae3fa171","fields":{"slug":"/contents/posts/2022-06-11/"},"frontmatter":{"title":"Object Delete"}}},{"node":{"id":"bbb421e5-8831-5038-a552-96243600d346","fields":{"slug":"/contents/posts/2022-06-25/"},"frontmatter":{"title":"Modal esc 관련 트러블 슈팅"}}},{"node":{"id":"df7ea411-5375-56e2-8ce9-4f86bb631af7","fields":{"slug":"/contents/posts/2022-07-20/"},"frontmatter":{"title":"OSI 7계층 중 2계층에 대해서 알아보자"}}},{"node":{"id":"bd139eae-9fe0-53cd-9205-95f18d33e90d","fields":{"slug":"/contents/posts/2022-08-17/"},"frontmatter":{"title":"페이지네이션 검색 관련 트러블슈팅"}}},{"node":{"id":"a8bfc1a9-ef8f-554f-8caf-5c17a027f52a","fields":{"slug":"/contents/posts/2022-09-10/"},"frontmatter":{"title":"이제 deep copy할 때 structuredClone을 씁시다."}}},{"node":{"id":"0cabe0ee-d57f-5cc9-8402-1a960f86eed7","fields":{"slug":"/contents/posts/2022-09-12/"},"frontmatter":{"title":"javascript class와 private 속성"}}},{"node":{"id":"3a533e42-a168-5aad-bb6b-0bee817a94cd","fields":{"slug":"/contents/posts/2022-09-24/"},"frontmatter":{"title":"TypeScript의 Soundness와 Type Assertion (as 떡칠하지 말자..)"}}},{"node":{"id":"9f1a0f31-42b4-5c43-8baa-c5973a1a5281","fields":{"slug":"/contents/posts/2022-09-28/"},"frontmatter":{"title":"어쩐지 yarn으로 패키지 설치할 때 오류가 났다.."}}},{"node":{"id":"74180524-c983-5af9-810b-e70418f145a5","fields":{"slug":"/contents/posts/2022-10-06/"},"frontmatter":{"title":"storybook addon 안보일때"}}},{"node":{"id":"a9317839-66e0-5734-a125-5266ac700f9f","fields":{"slug":"/contents/posts/2022-12-31/"},"frontmatter":{"title":"2022년 회고"}}},{"node":{"id":"e0593ebb-38b6-5d5b-bd37-63a6740ea2e8","fields":{"slug":"/contents/posts/2023-07-05/"},"frontmatter":{"title":"get image api 오류 트러블 슈팅"}}},{"node":{"id":"a5ffa0e0-ac0f-592c-a606-ef5545b8d5f5","fields":{"slug":"/contents/posts/2023-08-05/"},"frontmatter":{"title":"The Progressive JavaScript Framework"}}},{"node":{"id":"dba241d0-3594-5a1d-a854-be8184071124","fields":{"slug":"/contents/posts/2023-08-13/"},"frontmatter":{"title":"why can’t use window in vue template?"}}},{"node":{"id":"3bfdd15b-b1ae-57eb-98d8-ac40ffe55a63","fields":{"slug":"/contents/posts/2023-08-25/"},"frontmatter":{"title":"처음 남의 코드를 받으면 뭘 해야할까?"}}},{"node":{"id":"f399c871-2d22-5b62-ae86-75e0aa456d6d","fields":{"slug":"/contents/posts/2023-08-27/"},"frontmatter":{"title":"동물의 숲 짤 생성기를 만들었다"}}},{"node":{"id":"a78e398b-f8c7-56c1-a2c0-deedd720557b","fields":{"slug":"/contents/posts/2023-09-17/"},"frontmatter":{"title":"신뢰할 수 없는 코드를 쓰면서 불변성 지키기"}}},{"node":{"id":"a5b16fda-7eb6-5089-a91c-9231b9dd28d0","fields":{"slug":"/contents/posts/2023-10-01/"},"frontmatter":{"title":"mac에 rocky linux 설치하기"}}},{"node":{"id":"87297bfb-cf0a-5b5e-937c-f2aaa8295258","fields":{"slug":"/contents/posts/2023-10-09/"},"frontmatter":{"title":"nx로 모노레포 구축하기 (삽질기록)"}}},{"node":{"id":"29deefa4-82bd-5722-83d0-c11c3cf808d8","fields":{"slug":"/contents/posts/2023-10-22/"},"frontmatter":{"title":"yalc: npm publish없이 패키지를 테스트할 수 있는 방법"}}}]},"previous":{"fields":{"slug":"/contents/posts/2021-07-04/"},"frontmatter":{"title":"Prototype"}},"next":{"fields":{"slug":"/contents/posts/2021-08-12/"},"frontmatter":{"title":"\"함수 컴포넌트\"와 \"함수형 컴포넌트\"가 같은 말이라고 생각하시나요?"}}},"pageContext":{"id":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d","series":null,"previousPostId":"3809cc24-7495-5555-925d-dc49258ffc52","nextPostId":"5e2b28f0-928d-5111-af17-8be7fbe9ec39"}},"staticQueryHashes":[],"slicesMap":{}}