{"componentChunkName":"component---src-templates-post-jsx","path":"/contents/posts/2021-05-10/","result":{"data":{"site":{"siteMetadata":{"title":"kimnamsun"}},"markdownRemark":{"id":"7a575c97-2286-5eb3-9a4e-df5412bfb335","excerpt":"클론프로젝트를 하면서 꼭 한번 해보고 싶었던 무한 스크롤 기능과 로딩바 기능을 구현해보았다! 기존 scroll event의 문제점 스크롤을 끊임없이 감지하고 동기적으로 실행되기 때문에 메인 스레드에 영향을 준다.\n실제로 스크롤 이벤트로 무한스크롤기능을 구현할때의 상황. scroll이 맨 밑에 있을때 감지해주는 함수를 달아놨는데 스크롤이 계속 맨 밑에 머물…","html":"<p><img src=\"https://media.vlpt.us/images/nsunny0908/post/4b613a08-f328-453e-b7f3-0e92bf8634ee/May-09-2021%2018-07-31.gif\"></p>\n<blockquote>\n<p>클론프로젝트를 하면서 꼭 한번 해보고 싶었던 무한 스크롤 기능과 로딩바 기능을 구현해보았다!</p>\n</blockquote>\n<h1>기존 scroll event의 문제점</h1>\n<p>스크롤을 끊임없이 감지하고 동기적으로 실행되기 때문에 메인 스레드에 영향을 준다.\n실제로 스크롤 이벤트로 무한스크롤기능을 구현할때의 상황.<br>\nscroll이 맨 밑에 있을때 감지해주는 함수를 달아놨는데 스크롤이 계속 맨 밑에 머물러있을때 끊임없이 함수가 호출되고 있다.</p>\n<h1>Intersection Observer API</h1>\n<p>간단히 말하자면 타겟이 화면에 노출되었는 지의 여부를 관찰할 수 있는 API\n교차되었을때 실행할 <code class=\"language-text\">callback</code> 함수와 <code class=\"language-text\">option</code>을 인자로 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>callback</h2>\n<p>타겟 엘리먼트가 교차되었을 때 실행할 함수</p>\n<h2>options</h2>\n<p>observer 콜백이 호출되는 상황을 조작할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">root</code><br>\n교차 영역의 기준이 될 root 엘리먼트.<br>\n기본값은 브라우저의 viewport</li>\n<li><code class=\"language-text\">rootMargin</code><br>\nroot엘리먼트의 margin값<br>\nthreshold<br>\n타겟에 대한 교차 영역 비율<br>\n0의 경우 : 타겟 엘리먼트가 교차영역에 진입했을 시점에 observer를 실행<br>\n1의 경우 : 타켓 엘리먼트 전체가 교차영역에 들어왔을 때 observer를 실행</li>\n</ul>\n<h2>method</h2>\n<ul>\n<li>\n<p>IntersectionObserver.observe(target)</p>\n<ul>\n<li>타겟 엘리먼트에 대한 IntersectionObserver를 등록 (관찰 시작)</li>\n</ul>\n</li>\n<li>\n<p>IntersectionObserver.unobserve(target)</p>\n<ul>\n<li>타겟 엘리먼트에 대한 관찰 중지</li>\n</ul>\n</li>\n<li>\n<p>IntersectionObserver.disconnect()</p>\n<ul>\n<li>모든 타겟 엘리먼트에 대한 관찰 중지</li>\n</ul>\n</li>\n</ul>\n<h1>React hook에 적용해보기</h1>\n<p>우선 <code class=\"language-text\">target</code>, 로딩중인지 아닌지를 판별해줄 <code class=\"language-text\">isLoading</code>, 현재 아이템 갯수를 나타내는 <code class=\"language-text\">itemCount</code>를 state로 지정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>itemCount<span class=\"token punctuation\">,</span> setItemCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">,</span> setTarget<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>target에 변화가 있을때마다 실행해줄 <code class=\"language-text\">useEffect</code>에 observer 객체를 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> observer\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> observer <span class=\"token operator\">&amp;&amp;</span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">callback</code>함수의 인자로 entry와 observer를 받는다.<br>\n타겟의 교차 상태를 boolean값으로 반환하는 <code class=\"language-text\">entry.isIntersecting</code>가 <code class=\"language-text\">true</code>일때 list를 fetch하는 함수를 호출하고 <code class=\"language-text\">itemCount</code>에 1을 더해 setState해준다.<br>\n(난 한페이지당 1개의 리스트만 호출하고 스크롤이 끝에 다다랐을때 하나씩 더 보여주는 무한스크롤을 구현 예정이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchBidsLists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setItemCount</span><span class=\"token punctuation\">(</span>itemCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리스트를 fetch해오는 함수.\n우선 <code class=\"language-text\">isLoading</code>을 <code class=\"language-text\">true</code>로 setState해주고, fetch를 통해 백엔드로부터 데이터를 받아온다.<br>\nsetTimeout을 통해 약간의 시간차를 줘 로딩바가 더 잘보일 수 있도록 했다.<br>\nlist의 갯수가 현재 <code class=\"language-text\">itemCount</code>와 같으면 loading이 끝난것이기 때문에 다시 <code class=\"language-text\">false</code>로 바꿔주었고, list를 <code class=\"language-text\">itemCount</code>의 수만큼 slice해 setState해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchBidsLists</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BIDS_API</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>day<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bidsData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>bidsData<span class=\"token punctuation\">.</span>auctions<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> itemCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setBidsLists</span><span class=\"token punctuation\">(</span>bidsData<span class=\"token punctuation\">.</span>auctions<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> itemCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 컴포넌트가 언마운트될때 <code class=\"language-text\">isLoading</code>을 <code class=\"language-text\">false</code>로 setState해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>로딩바부분.\n<code class=\"language-text\">isLoading</code>이 <code class=\"language-text\">true</code>일때만 로딩바가 보여야하므로 조건부렌더링을 걸어주었고 setTarget을 <code class=\"language-text\">forwardRef</code>로 지정해주었다.\n<code class=\"language-text\">forwardRef</code>는 React 컴포넌트에 ref prop을 넘겨서 그 내부에 있는 HTML 엘리먼트에 접근을 하게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  isLoading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token attr-name\">forwardRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setTarget<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Intersection Observer API를 활용한 무한스크롤","date":"May 10, 2021"},"fields":{"slug":"/contents/posts/2021-05-10/","readingTime":{"minutes":4.55}}},"seriesList":{"edges":[{"node":{"id":"5267d72c-500b-59e9-9927-51ccdcf24b4a","fields":{"slug":"/contents/posts/2020-12-24/"},"frontmatter":{"title":"사진학도가 개발자가 된 이유"}}},{"node":{"id":"7a575c97-2286-5eb3-9a4e-df5412bfb335","fields":{"slug":"/contents/posts/2021-05-10/"},"frontmatter":{"title":"Intersection Observer API를 활용한 무한스크롤"}}},{"node":{"id":"0f295bb2-6a3c-511b-99d3-3d903307287d","fields":{"slug":"/contents/posts/2021-05-17/"},"frontmatter":{"title":"기술을 할 것인가, 예술을 할 것인가"}}},{"node":{"id":"9f0c0170-6efd-5ba0-b3b2-7130bedea7a0","fields":{"slug":"/contents/posts/2021-06-13/"},"frontmatter":{"title":"코딩 부트캠프와 좋은 개발자"}}},{"node":{"id":"3809cc24-7495-5555-925d-dc49258ffc52","fields":{"slug":"/contents/posts/2021-07-04/"},"frontmatter":{"title":"Prototype"}}},{"node":{"id":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d","fields":{"slug":"/contents/posts/2021-08-11/"},"frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)"}}},{"node":{"id":"5e2b28f0-928d-5111-af17-8be7fbe9ec39","fields":{"slug":"/contents/posts/2021-08-12/"},"frontmatter":{"title":"\"함수 컴포넌트\"와 \"함수형 컴포넌트\"가 같은 말이라고 생각하시나요?"}}},{"node":{"id":"80af794d-6d8b-57a1-a2d1-64b3e3b98fa7","fields":{"slug":"/contents/posts/2021-08-16/"},"frontmatter":{"title":"React Context Api"}}},{"node":{"id":"6ce9e47c-23b4-5026-bed6-116351eb8aee","fields":{"slug":"/contents/posts/2021-08-21/"},"frontmatter":{"title":"React Portal"}}},{"node":{"id":"88cdf508-0abb-5014-8d70-e65d35c6d884","fields":{"slug":"/contents/posts/2021-08-22/"},"frontmatter":{"title":"제어 컴포넌트와 비제어 컴포넌트"}}},{"node":{"id":"0d93f1f5-2ccc-54b6-b943-7179687ac266","fields":{"slug":"/contents/posts/2021-08-30/"},"frontmatter":{"title":"TDZ (Temporal Dead Zone)"}}},{"node":{"id":"457d0b1b-3d90-5eea-a66f-8587373ab7c6","fields":{"slug":"/contents/posts/2021-09-04/"},"frontmatter":{"title":"VAC 패턴"}}},{"node":{"id":"b0b1c6d8-47d0-5edf-9261-25d3a5a75ad2","fields":{"slug":"/contents/posts/2021-09-09/"},"frontmatter":{"title":"Typescript Alias 설정시 마주친 오류"}}},{"node":{"id":"c2550142-36f4-5398-a554-702b8fa1b6b8","fields":{"slug":"/contents/posts/2021-10-05/"},"frontmatter":{"title":"patch-package로 외부 라이브러리 수정해서 사용하기"}}},{"node":{"id":"36da5bac-6acc-5daa-b307-4a9fdc74542f","fields":{"slug":"/contents/posts/2021-11-25/"},"frontmatter":{"title":"Custom hook vs Function"}}},{"node":{"id":"2a55cc9e-c79c-5a4d-ac53-a0d36cc69597","fields":{"slug":"/contents/posts/2021-12-19/"},"frontmatter":{"title":"NPM"}}},{"node":{"id":"6d5384bb-c04f-5cc7-945c-5aea5380bb94","fields":{"slug":"/contents/posts/2021-12-31/"},"frontmatter":{"title":"2021년 회고"}}},{"node":{"id":"745a2241-d9b5-5ce0-b6fd-f2a66699554d","fields":{"slug":"/contents/posts/2022-01-05/"},"frontmatter":{"title":":focus-within"}}},{"node":{"id":"b794f451-f15c-5011-8dba-34a5b533b144","fields":{"slug":"/contents/posts/2022-02-28/"},"frontmatter":{"title":"div에서 placeholder 사용하기 (styled-component)"}}},{"node":{"id":"7c078298-d430-54a2-a954-63a6687c7328","fields":{"slug":"/contents/posts/2022-03-13/"},"frontmatter":{"title":"Tooltip component 트러블 슈팅"}}},{"node":{"id":"f1e4e298-5cae-5a57-8798-17ababf157e0","fields":{"slug":"/contents/posts/2022-04-01/"},"frontmatter":{"title":"OSI 7계층 중 1계층에 대해서 알아보자"}}},{"node":{"id":"279cb68d-a1a3-5ee4-b743-784d2bf365c5","fields":{"slug":"/contents/posts/2022-05-22/"},"frontmatter":{"title":"프론트앤드에서의 테스트 (나에겐 너무나 멀고 힘든 테스트코드 짜기..)"}}},{"node":{"id":"83ff9034-42a0-5267-bc2b-d710f2446cff","fields":{"slug":"/contents/posts/2022-06-05/"},"frontmatter":{"title":"debounce 트러블 슈팅"}}},{"node":{"id":"796731f6-1035-5bb8-ac76-467aae3fa171","fields":{"slug":"/contents/posts/2022-06-11/"},"frontmatter":{"title":"Object Delete"}}},{"node":{"id":"bbb421e5-8831-5038-a552-96243600d346","fields":{"slug":"/contents/posts/2022-06-25/"},"frontmatter":{"title":"Modal esc 관련 트러블 슈팅"}}},{"node":{"id":"df7ea411-5375-56e2-8ce9-4f86bb631af7","fields":{"slug":"/contents/posts/2022-07-20/"},"frontmatter":{"title":"OSI 7계층 중 2계층에 대해서 알아보자"}}},{"node":{"id":"bd139eae-9fe0-53cd-9205-95f18d33e90d","fields":{"slug":"/contents/posts/2022-08-17/"},"frontmatter":{"title":"페이지네이션 검색 관련 트러블슈팅"}}},{"node":{"id":"a8bfc1a9-ef8f-554f-8caf-5c17a027f52a","fields":{"slug":"/contents/posts/2022-09-10/"},"frontmatter":{"title":"이제 deep copy할 때 structuredClone을 씁시다."}}},{"node":{"id":"0cabe0ee-d57f-5cc9-8402-1a960f86eed7","fields":{"slug":"/contents/posts/2022-09-12/"},"frontmatter":{"title":"javascript class와 private 속성"}}},{"node":{"id":"3a533e42-a168-5aad-bb6b-0bee817a94cd","fields":{"slug":"/contents/posts/2022-09-24/"},"frontmatter":{"title":"TypeScript의 Soundness와 Type Assertion (as 떡칠하지 말자..)"}}},{"node":{"id":"9f1a0f31-42b4-5c43-8baa-c5973a1a5281","fields":{"slug":"/contents/posts/2022-09-28/"},"frontmatter":{"title":"어쩐지 yarn으로 패키지 설치할 때 오류가 났다.."}}},{"node":{"id":"74180524-c983-5af9-810b-e70418f145a5","fields":{"slug":"/contents/posts/2022-10-06/"},"frontmatter":{"title":"storybook addon 안보일때"}}},{"node":{"id":"a9317839-66e0-5734-a125-5266ac700f9f","fields":{"slug":"/contents/posts/2022-12-31/"},"frontmatter":{"title":"2022년 회고"}}},{"node":{"id":"e0593ebb-38b6-5d5b-bd37-63a6740ea2e8","fields":{"slug":"/contents/posts/2023-07-05/"},"frontmatter":{"title":"get image api 오류 트러블 슈팅"}}},{"node":{"id":"a5ffa0e0-ac0f-592c-a606-ef5545b8d5f5","fields":{"slug":"/contents/posts/2023-08-05/"},"frontmatter":{"title":"The Progressive JavaScript Framework"}}},{"node":{"id":"dba241d0-3594-5a1d-a854-be8184071124","fields":{"slug":"/contents/posts/2023-08-13/"},"frontmatter":{"title":"why can’t use window in vue template?"}}},{"node":{"id":"3bfdd15b-b1ae-57eb-98d8-ac40ffe55a63","fields":{"slug":"/contents/posts/2023-08-25/"},"frontmatter":{"title":"처음 남의 코드를 받으면 뭘 해야할까?"}}},{"node":{"id":"f399c871-2d22-5b62-ae86-75e0aa456d6d","fields":{"slug":"/contents/posts/2023-08-27/"},"frontmatter":{"title":"동물의 숲 짤 생성기를 만들었다"}}},{"node":{"id":"a78e398b-f8c7-56c1-a2c0-deedd720557b","fields":{"slug":"/contents/posts/2023-09-17/"},"frontmatter":{"title":"신뢰할 수 없는 코드를 쓰면서 불변성 지키기"}}},{"node":{"id":"a5b16fda-7eb6-5089-a91c-9231b9dd28d0","fields":{"slug":"/contents/posts/2023-10-01/"},"frontmatter":{"title":"mac에 rocky linux 설치하기"}}},{"node":{"id":"87297bfb-cf0a-5b5e-937c-f2aaa8295258","fields":{"slug":"/contents/posts/2023-10-09/"},"frontmatter":{"title":"nx로 모노레포 구축하기 (삽질기록)"}}}]},"previous":{"fields":{"slug":"/contents/posts/2020-12-24/"},"frontmatter":{"title":"사진학도가 개발자가 된 이유"}},"next":{"fields":{"slug":"/contents/posts/2021-05-17/"},"frontmatter":{"title":"기술을 할 것인가, 예술을 할 것인가"}}},"pageContext":{"id":"7a575c97-2286-5eb3-9a4e-df5412bfb335","series":null,"previousPostId":"5267d72c-500b-59e9-9927-51ccdcf24b4a","nextPostId":"0f295bb2-6a3c-511b-99d3-3d903307287d"}},"staticQueryHashes":[],"slicesMap":{}}