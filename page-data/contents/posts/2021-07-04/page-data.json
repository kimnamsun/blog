{"componentChunkName":"component---src-templates-post-jsx","path":"/contents/posts/2021-07-04/","result":{"data":{"site":{"siteMetadata":{"title":"kimnamsun"}},"markdownRemark":{"id":"3809cc24-7495-5555-925d-dc49258ffc52","excerpt":"자바스크립트를 공부하면서 가장 진입장벽이 높은 개념인 프로토타입,, 🤪\n하나하나 차근차근 살펴보기! Prototype이란 자바스크립트는 프로토타입 기반 언어이다. 클래스 기반 언어에서는 상속을 사용하지만 프로토타입 기반 언어에서는 어떤 객체를 원형으로 삼고 이를 복제함으로써 상속과 비슷한 효과를 얻는다. Prototype은 말 그대로 객체의 원형이라고 할…","html":"<blockquote>\n<p>자바스크립트를 공부하면서 가장 진입장벽이 높은 개념인 프로토타입,, 🤪\n하나하나 차근차근 살펴보기!</p>\n</blockquote>\n<h1>Prototype이란</h1>\n<p>자바스크립트는 프로토타입 기반 언어이다.<br>\n클래스 기반 언어에서는 상속을 사용하지만 프로토타입 기반 언어에서는 어떤 객체를 원형으로 삼고 이를 복제함으로써 상속과 비슷한 효과를 얻는다.</p>\n<p>Prototype은 말 그대로 객체의 원형이라고 할 수 있다. prototype이라는 프로퍼티는 그 용도가 약속되어 있는 특수한 프로퍼티다. prototype에 저장된 속성들은 생성자를 통해서 객체가 만들어질 때 그 객체에 연결된다.</p>\n<p>어떤 생성자 함수를 new 연산자와 함께 호출하면 constructor에 정의된 내용을 바탕으로 새로운 인스턴스가 생성된다. 이때 인스턴스에는 <strong>proto</strong>라는 프로퍼티가 자동으로 부여되는데 이 프로퍼티는 constructor의 prototype이라는 프로퍼티를 참조한다.</p>\n<p>예를 들어서 살펴보자!</p>\n<p>Dog라는 함수를 만들고, Dog에 bark라는 prototype 속성을 추가해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"bow wow\"</span></code></pre></div>\n<p><code class=\"language-text\">new</code> 연산자를 통해 인스턴스를 생성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bori <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>bori를 호출해보면, <code class=\"language-text\">__proto__</code>라는 프로퍼티와 bark속성이 부여되어있다.</p>\n<p><img src=\"https://media.vlpt.us/images/nsunny0908/post/d21a2d3d-f35e-4933-ad85-ee36621db7fd/A5AB7DB0-2E45-4EE3-BB4C-E3900CCFFE96.png\"></p>\n<h1>Prototype Chain</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> bori <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bori<span class=\"token punctuation\">.</span>bark<span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></code></pre></div>\n<p>생성자 SmallDog을 통해 만들어진 객체 bori가 Animal의 프로퍼티 bark에 접근 가능한 것은 prototype 체인으로 SmallDog과 Animal이 연결되어 있기 때문이다. 내부적으로는 아래와 같은 일이 일어난다.</p>\n<blockquote>\n<ol>\n<li>객체 bori에서 bark를 찾는다.</li>\n<li>없다면 SmallDog.prototype.bark를 찾는다.</li>\n<li>없다면 Dog.prototype.bark를 찾는다.</li>\n<li>없다면 Animal.prototype.bark를 찾는다.</li>\n</ol>\n</blockquote>\n<p>만약, bori와 SmallDog의 bark속성을 변경하면 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"wal wal\"</span>\n\n<span class=\"token keyword\">const</span> bori <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbori<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"bow wow\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bori<span class=\"token punctuation\">.</span>bark<span class=\"token punctuation\">)</span> <span class=\"token comment\">//bowwow</span></code></pre></div>\n<p><img src=\"https://media.vlpt.us/images/nsunny0908/post/57ecf57d-4943-4c97-a535-446d03849da6/7BD9CB36-C869-40E2-8E15-5D2E00DB3505.png\"></p>\n<blockquote>\n<p>prototype는 객체와 객체를 연결하는 체인의 역할을 한다.\n이러한 관계를 <strong>prototype chain</strong>이라고 한다.</p>\n</blockquote>\n<p>만약!! SmallDog.prototype = Animal.prototype 으로 한 후,\nSmallDog의 bark 값을 변경하면 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype\n<span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"bow wooooow\"</span>\n\n<span class=\"token keyword\">const</span> bori <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmallDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>SmallDog.prototype = Animal.prototype 으로 하면 안된다.\nSmallDog.prototype의 값을 변경하면 Animal.prototype도 변경하기 때문이다.</p>\n</blockquote>\n<p><img src=\"https://media.vlpt.us/images/nsunny0908/post/c018f4c6-3057-4d60-90ca-1b8aa198a6aa/11FDD7A9-BF9B-442F-82AA-0A9350A17411.png\"></p>\n<p>Dog.prototype = new Animal()은 Animal.prototype의 원형으로 하는 객체가 생성되기 때문에 new Animal()를 통해서 만들어진 객체에 변화가 생겨도 Animal.prototype의 객체에는 영향을 주지 않는다.</p>\n<h1>Prototype과 Class의 차이</h1>\n<p>es6부터 Class 문법이 추가되었다.<br>\n그렇다고 자바스크립트가 프로토타입 기반 언어에서 클래스 기반 언어가 된 것은 아니다.\n그렇다면 Class와 Prototype은 어떤 차이가 있을까?</p>\n<h2>Class는 상속이 가능하지만 Prototype은 상속이 불가능하다.</h2>\n<p>Prototype에서 상속을 구현하고자 한다면 앞서 설명했던 prototype chaining을 사용해야한다. 그렇지만 Class를 사용하면 객체 생성자로 구현했던 코드를 조금 더 명확하게 구현 할 수 있고 상속도 훨씬 쉽게 해줄 수 있기 때문에 Class를 사용하면 굳이\nprototype chaining 을 써야할 필요가 없다.</p>\n<h2>불변성과 가변성</h2>\n<p>Class는 '틀' 과 같아서 도중에 바뀌는 일이 없다. 같은 틀 안에서 찍어낸 인스턴스를 프로퍼티나 메소드를 추가 하지 않는 이상 동일한 형태를 가진다.</p>\n<p>반면 prototype 기반 언어는 객체가 곧 설계도가 되기 때문에 동적인 설계가 가능하다.</p>","frontmatter":{"title":"Prototype","date":"July 04, 2021"},"fields":{"slug":"/contents/posts/2021-07-04/","readingTime":{"minutes":5.16}}},"seriesList":{"edges":[{"node":{"id":"5267d72c-500b-59e9-9927-51ccdcf24b4a","fields":{"slug":"/contents/posts/2020-12-24/"},"frontmatter":{"title":"사진학도가 개발자가 된 이유"}}},{"node":{"id":"7a575c97-2286-5eb3-9a4e-df5412bfb335","fields":{"slug":"/contents/posts/2021-05-10/"},"frontmatter":{"title":"Intersection Observer API를 활용한 무한스크롤"}}},{"node":{"id":"0f295bb2-6a3c-511b-99d3-3d903307287d","fields":{"slug":"/contents/posts/2021-05-17/"},"frontmatter":{"title":"기술을 할 것인가, 예술을 할 것인가"}}},{"node":{"id":"9f0c0170-6efd-5ba0-b3b2-7130bedea7a0","fields":{"slug":"/contents/posts/2021-06-13/"},"frontmatter":{"title":"코딩 부트캠프와 좋은 개발자"}}},{"node":{"id":"3809cc24-7495-5555-925d-dc49258ffc52","fields":{"slug":"/contents/posts/2021-07-04/"},"frontmatter":{"title":"Prototype"}}},{"node":{"id":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d","fields":{"slug":"/contents/posts/2021-08-11/"},"frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)"}}},{"node":{"id":"5e2b28f0-928d-5111-af17-8be7fbe9ec39","fields":{"slug":"/contents/posts/2021-08-12/"},"frontmatter":{"title":"\"함수 컴포넌트\"와 \"함수형 컴포넌트\"가 같은 말이라고 생각하시나요?"}}},{"node":{"id":"80af794d-6d8b-57a1-a2d1-64b3e3b98fa7","fields":{"slug":"/contents/posts/2021-08-16/"},"frontmatter":{"title":"React Context Api"}}},{"node":{"id":"6ce9e47c-23b4-5026-bed6-116351eb8aee","fields":{"slug":"/contents/posts/2021-08-21/"},"frontmatter":{"title":"React Portal"}}},{"node":{"id":"88cdf508-0abb-5014-8d70-e65d35c6d884","fields":{"slug":"/contents/posts/2021-08-22/"},"frontmatter":{"title":"제어 컴포넌트와 비제어 컴포넌트"}}},{"node":{"id":"0d93f1f5-2ccc-54b6-b943-7179687ac266","fields":{"slug":"/contents/posts/2021-08-30/"},"frontmatter":{"title":"TDZ (Temporal Dead Zone)"}}},{"node":{"id":"457d0b1b-3d90-5eea-a66f-8587373ab7c6","fields":{"slug":"/contents/posts/2021-09-04/"},"frontmatter":{"title":"VAC 패턴"}}},{"node":{"id":"b0b1c6d8-47d0-5edf-9261-25d3a5a75ad2","fields":{"slug":"/contents/posts/2021-09-09/"},"frontmatter":{"title":"Typescript Alias 설정시 마주친 오류"}}},{"node":{"id":"c2550142-36f4-5398-a554-702b8fa1b6b8","fields":{"slug":"/contents/posts/2021-10-05/"},"frontmatter":{"title":"patch-package로 외부 라이브러리 수정해서 사용하기"}}},{"node":{"id":"36da5bac-6acc-5daa-b307-4a9fdc74542f","fields":{"slug":"/contents/posts/2021-11-25/"},"frontmatter":{"title":"Custom hook vs Function"}}},{"node":{"id":"2a55cc9e-c79c-5a4d-ac53-a0d36cc69597","fields":{"slug":"/contents/posts/2021-12-19/"},"frontmatter":{"title":"NPM"}}},{"node":{"id":"6d5384bb-c04f-5cc7-945c-5aea5380bb94","fields":{"slug":"/contents/posts/2021-12-31/"},"frontmatter":{"title":"2021년 회고"}}},{"node":{"id":"745a2241-d9b5-5ce0-b6fd-f2a66699554d","fields":{"slug":"/contents/posts/2022-01-05/"},"frontmatter":{"title":":focus-within"}}},{"node":{"id":"b794f451-f15c-5011-8dba-34a5b533b144","fields":{"slug":"/contents/posts/2022-02-28/"},"frontmatter":{"title":"div에서 placeholder 사용하기 (styled-component)"}}},{"node":{"id":"7c078298-d430-54a2-a954-63a6687c7328","fields":{"slug":"/contents/posts/2022-03-13/"},"frontmatter":{"title":"Tooltip component 트러블 슈팅"}}},{"node":{"id":"f1e4e298-5cae-5a57-8798-17ababf157e0","fields":{"slug":"/contents/posts/2022-04-01/"},"frontmatter":{"title":"OSI 7계층 중 1계층에 대해서 알아보자"}}},{"node":{"id":"279cb68d-a1a3-5ee4-b743-784d2bf365c5","fields":{"slug":"/contents/posts/2022-05-22/"},"frontmatter":{"title":"프론트앤드에서의 테스트 (나에겐 너무나 멀고 힘든 테스트코드 짜기..)"}}},{"node":{"id":"83ff9034-42a0-5267-bc2b-d710f2446cff","fields":{"slug":"/contents/posts/2022-06-05/"},"frontmatter":{"title":"debounce 트러블 슈팅"}}},{"node":{"id":"796731f6-1035-5bb8-ac76-467aae3fa171","fields":{"slug":"/contents/posts/2022-06-11/"},"frontmatter":{"title":"Object Delete"}}},{"node":{"id":"bbb421e5-8831-5038-a552-96243600d346","fields":{"slug":"/contents/posts/2022-06-25/"},"frontmatter":{"title":"Modal esc 관련 트러블 슈팅"}}},{"node":{"id":"df7ea411-5375-56e2-8ce9-4f86bb631af7","fields":{"slug":"/contents/posts/2022-07-20/"},"frontmatter":{"title":"OSI 7계층 중 2계층에 대해서 알아보자"}}},{"node":{"id":"bd139eae-9fe0-53cd-9205-95f18d33e90d","fields":{"slug":"/contents/posts/2022-08-17/"},"frontmatter":{"title":"페이지네이션 검색 관련 트러블슈팅"}}},{"node":{"id":"a8bfc1a9-ef8f-554f-8caf-5c17a027f52a","fields":{"slug":"/contents/posts/2022-09-10/"},"frontmatter":{"title":"이제 deep copy할 때 structuredClone을 씁시다."}}},{"node":{"id":"0cabe0ee-d57f-5cc9-8402-1a960f86eed7","fields":{"slug":"/contents/posts/2022-09-12/"},"frontmatter":{"title":"javascript class와 private 속성"}}},{"node":{"id":"3a533e42-a168-5aad-bb6b-0bee817a94cd","fields":{"slug":"/contents/posts/2022-09-24/"},"frontmatter":{"title":"TypeScript의 Soundness와 Type Assertion (as 떡칠하지 말자..)"}}},{"node":{"id":"9f1a0f31-42b4-5c43-8baa-c5973a1a5281","fields":{"slug":"/contents/posts/2022-09-28/"},"frontmatter":{"title":"어쩐지 yarn으로 패키지 설치할 때 오류가 났다.."}}},{"node":{"id":"74180524-c983-5af9-810b-e70418f145a5","fields":{"slug":"/contents/posts/2022-10-06/"},"frontmatter":{"title":"storybook addon 안보일때"}}},{"node":{"id":"a9317839-66e0-5734-a125-5266ac700f9f","fields":{"slug":"/contents/posts/2022-12-31/"},"frontmatter":{"title":"2022년 회고"}}},{"node":{"id":"e0593ebb-38b6-5d5b-bd37-63a6740ea2e8","fields":{"slug":"/contents/posts/2023-07-05/"},"frontmatter":{"title":"get image api 오류 트러블 슈팅"}}},{"node":{"id":"a5ffa0e0-ac0f-592c-a606-ef5545b8d5f5","fields":{"slug":"/contents/posts/2023-08-05/"},"frontmatter":{"title":"The Progressive JavaScript Framework"}}},{"node":{"id":"dba241d0-3594-5a1d-a854-be8184071124","fields":{"slug":"/contents/posts/2023-08-13/"},"frontmatter":{"title":"why can’t use window in vue template?"}}},{"node":{"id":"3bfdd15b-b1ae-57eb-98d8-ac40ffe55a63","fields":{"slug":"/contents/posts/2023-08-25/"},"frontmatter":{"title":"처음 남의 코드를 받으면 뭘 해야할까?"}}},{"node":{"id":"f399c871-2d22-5b62-ae86-75e0aa456d6d","fields":{"slug":"/contents/posts/2023-08-27/"},"frontmatter":{"title":"동물의 숲 짤 생성기를 만들었다"}}},{"node":{"id":"a78e398b-f8c7-56c1-a2c0-deedd720557b","fields":{"slug":"/contents/posts/2023-09-17/"},"frontmatter":{"title":"신뢰할 수 없는 코드를 쓰면서 불변성 지키기"}}},{"node":{"id":"a5b16fda-7eb6-5089-a91c-9231b9dd28d0","fields":{"slug":"/contents/posts/2023-10-01/"},"frontmatter":{"title":"mac에 rocky linux 설치하기"}}},{"node":{"id":"87297bfb-cf0a-5b5e-937c-f2aaa8295258","fields":{"slug":"/contents/posts/2023-10-09/"},"frontmatter":{"title":"nx로 모노레포 구축하기 (삽질기록)"}}},{"node":{"id":"29deefa4-82bd-5722-83d0-c11c3cf808d8","fields":{"slug":"/contents/posts/2023-10-22/"},"frontmatter":{"title":"yalc: npm publish없이 패키지를 테스트할 수 있는 방법"}}}]},"previous":{"fields":{"slug":"/contents/posts/2021-06-13/"},"frontmatter":{"title":"코딩 부트캠프와 좋은 개발자"}},"next":{"fields":{"slug":"/contents/posts/2021-08-11/"},"frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)"}}},"pageContext":{"id":"3809cc24-7495-5555-925d-dc49258ffc52","series":null,"previousPostId":"9f0c0170-6efd-5ba0-b3b2-7130bedea7a0","nextPostId":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d"}},"staticQueryHashes":[],"slicesMap":{}}