{"componentChunkName":"component---src-templates-post-jsx","path":"/contents/posts/2023-09-17/","result":{"data":{"site":{"siteMetadata":{"title":"kimnamsun"}},"markdownRemark":{"id":"a78e398b-f8c7-56c1-a2c0-deedd720557b","excerpt":"쏙쏙 들어오는 함수형 코딩 북 스터디를 하며 정리한 내용이다. Chapter 7 : 신뢰할 수 없는 코드를 쓰면서 불변성 지키기 레거시 코드와 불변성 추가된 함수()를 호출하면 카피 온 라이트 원칙을 지킬 수 없다. 그렇다고 를 고칠 수도 없다.  :  원칙을 지키면서 안전하게 함수를 사용할 수 있는 다른 원칙. 우리가 만든 카피 온 라이트 코드는 신뢰할…","html":"<blockquote>\n<p>쏙쏙 들어오는 함수형 코딩 북 스터디를 하며 정리한 내용이다.</p>\n</blockquote>\n<h1>Chapter 7 : 신뢰할 수 없는 코드를 쓰면서 불변성 지키기</h1>\n<h2>레거시 코드와 불변성</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add_item_to_cart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token function\">make_cart_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span>\n  shopping_cart <span class=\"token operator\">=</span> <span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>shopping_cart<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> <span class=\"token function\">calc_total</span><span class=\"token punctuation\">(</span>shopping_cart<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">set_cart_total_dom</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">update_shipping_icons</span><span class=\"token punctuation\">(</span>shopping_cart<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">update_tax_dom</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 새로 추가해야하는 레거시 코드</span>\n  <span class=\"token comment\">// 이 코드는 장바구니 값을 바꾸기 때문에 불변성을 해친다.</span>\n  <span class=\"token function\">black_friday_promotion</span><span class=\"token punctuation\">(</span>shopping_cart<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>추가된 함수(<code class=\"language-text\">black_friday_promotion</code>)를 호출하면 카피 온 라이트 원칙을 지킬 수 없다.</li>\n<li>그렇다고 <code class=\"language-text\">black_friday_promotion</code>를 고칠 수도 없다.</li>\n<li><code class=\"language-text\">방어적 복사</code> : <code class=\"language-text\">카피-온-라이트</code> 원칙을 지키면서 안전하게 함수를 사용할 수 있는 다른 원칙.</li>\n</ul>\n<h2>우리가 만든 카피 온 라이트 코드는 신뢰할 수 없는 코드와 상호작용해야 합니다</h2>\n<ul>\n<li>불변성이 지켜진 부분을 <code class=\"language-text\">안전지대</code>라고 한다.</li>\n<li><code class=\"language-text\">안전지대</code>에 있는 코드는 걱정 없이 쓸 수 있다.</li>\n<li><code class=\"language-text\">black_friday_promotion</code>은 <code class=\"language-text\">안전지대</code>에 있는 코드가 아니다.</li>\n<li><code class=\"language-text\">black_friday_promotion</code>의 입출력을 통해 안전지대에 있는 코드와 데이터를 주고 받아야 한다.</li>\n<li>문제는 안전지대 밖으로 나가는 데이터는 잠재적으로 바뀔 수 있고, 신뢰할 수 없는 코드에서 안전지대로 들어오는 데이터 역시 잠재적으로 바뀔 수 있다는 것이다.</li>\n</ul>\n<h2>방어적 복사</h2>\n<ul>\n<li>기존의 카피-온-라이트는 데이터를 바꾸기 전에 복사한다.</li>\n<li>하지만, 레거시 코드에서는 무엇을 복사해야 할지 예상할 수 없으며 어떤 일이 일어날지 알 수 없음</li>\n<li>따라서 데이터가 바뀌는 것을 완벽히 막아주는 원칙이 필요하다 <strong>(방어적 복사)</strong></li>\n</ul>\n<p>방어적 복사는 원본이 바뀌는 것을 막아준다.</p>\n<ul>\n<li>레거시 코드에서 데이터가 들어오는 상황</li>\n<li>신뢰할 수 없는 코드에서 변경 가능한 데이터가 들어온다.</li>\n<li>들어온 데이터로 깊은 복사본을 만들고, 변경 가능한 원본 데이터는 버린다.</li>\n<li>신뢰할 수 없는 코드만 복사본을 사용하므로 데이터는 바뀌지 않는다. (데이터 보호)</li>\n<li>레거시 코드로 데이터를 보낼 때의 상황</li>\n<li>데이터를 내보내기 전에 깊은 복사를 진행</li>\n<li>깊은 복사본의 데이터를 내보내 안전한 코드에서의 데이터가 변경되지 않도록 함</li>\n</ul>\n<blockquote>\n<p>방어적 복사를 통해 불변성을 지킬 수 있다.</p>\n</blockquote>\n<h2>방어적 복사 구현하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\nshopping_cart <span class=\"token operator\">=</span> <span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>shopping_cart<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">var</span> cart_copy <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>shopping_cart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 넘기기 전에 복사</span>\n<span class=\"token function\">black_friday_promotion</span><span class=\"token punctuation\">(</span>cart_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshopping_cart <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>cart_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 들어오는 데이터를 위한 복사</span></code></pre></div>\n<h2>방어적 복사 규칙</h2>\n<ul>\n<li>\n<p>규칙 1 : 데이터가 안전한 코드에서 나갈 때 복사하기</p>\n<ul>\n<li>불변성 데이터를 위한 깊은 복사본을 생성</li>\n<li>신뢰할 수 없는 코드로 복사본을 전달합니다.</li>\n</ul>\n</li>\n<li>\n<p>규칙 2 : 안전한 코드로 데이터가 들어올 때 복사하기</p>\n<ul>\n<li>변경될 수도 있는 데이터가 들어오면 바로 깊은 복사본을 만들어 안전한 코드로 전달</li>\n<li>복사본을 안전한 코드에서 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<h2>신뢰할 수 없는 코드 감싸기</h2>\n<p>방어적 복사 코드를 분리해 새로운 함수로 만들자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add_item_to_cart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  shopping_cart <span class=\"token operator\">=</span> <span class=\"token function\">black_friday_promotion_safe</span><span class=\"token punctuation\">(</span>shopping_cart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">black_friday_promotion_safe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> cart_copy <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">black_friday_promotion</span><span class=\"token punctuation\">(</span>cart_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>cart_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>카피-온-라이트와 방어적 복사 비교</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">카피-온-라이트</th>\n<th align=\"center\">방어적 복사</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">언제</td>\n<td align=\"center\">통제할 수 있는 데이터 변경시</td>\n<td align=\"center\">신뢰할 수 없는 코드와 데이터 상호작용</td>\n</tr>\n<tr>\n<td align=\"center\">어디서</td>\n<td align=\"center\">안전한 코드 내 어디서든</td>\n<td align=\"center\">안전한 코드 경계에서 데이터 오고 갈 때</td>\n</tr>\n<tr>\n<td align=\"center\">방식</td>\n<td align=\"center\">얕은 방식</td>\n<td align=\"center\">깊은 복사</td>\n</tr>\n<tr>\n<td align=\"center\">규칙</td>\n<td align=\"center\">1. 얕은 복사 생성</td>\n<td align=\"center\">1. 들어온 데이터 깊은 복사 생성</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">2. 복사본 변경</td>\n<td align=\"center\">2. 나갈 데이터 깊은 복사 생성</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">3. 복사본 리턴</td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<h2>깊은 복사는 얕은 복사보다 비쌉니다</h2>\n<ul>\n<li>깊은 복사는 원본과 어떤 데이터 구조도 공유하지 않는다.</li>\n<li>중첩된 모든 객체, 배열을 복사한다.</li>\n<li>깊은 복사는 얕은 복사보다 비싸기 때문에 카피-온-라이트를 사용할 수 없는 곳에서만 사용한다.</li>\n<li>모든 항목을 재귀적으로 복사하는 lodash의 cloneDeep 함수를 사용하면 깊은 복사를 할 수 있다.</li>\n</ul>\n<h2>structuredClone()</h2>\n<ul>\n<li>깊은 복사를 위한 js의 내장 기능</li>\n<li>기존에는 Web API의 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">structured clone algorithm</a>을 사용했다.</li>\n</ul>\n<h3>structured clone algorithm</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">objectToBeCloned</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>objectToBeCloned <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> objectToBeCloned\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> objectClone\n\n  <span class=\"token comment\">//객체라면 타입에 따라 객체를 생성하여 리턴</span>\n  <span class=\"token keyword\">var</span> Constructor <span class=\"token operator\">=</span> objectToBeCloned<span class=\"token punctuation\">.</span>constructor\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Constructor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">RegExp</span><span class=\"token operator\">:</span>\n      objectClone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span>objectToBeCloned<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">Date</span><span class=\"token operator\">:</span>\n      objectClone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span>objectToBeCloned<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      objectClone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//객체의 속성들을 복사</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> objectToBeCloned<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 재귀</span>\n    objectClone<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>objectToBeCloned<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 복사된 객체 리턴</span>\n  <span class=\"token keyword\">return</span> objectClone\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>structuredClone() vs JSON.parse(JSON.stringify(x))</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"namsun\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-09-16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"risa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jiwoo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> copyPerson <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"namsun\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2023-09-16T00:00:00.000Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/nsunny0908/post/3f67e9b0-d221-46ab-8130-fe006303b415/image.png\"></p>\n<ul>\n<li>JSON은 객체를 문자열로 인코딩하는 형식</li>\n<li>직렬화를 사용하여 개체를 해당 문자열로 변환하고 역직렬화를 사용(문자열 변환 -> 개체).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"namsun\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-09-16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"risa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jiwoo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> copyPerson <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"namsun\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>프로토타입, 함수, Error, Dom 노드를 다룰 때 제한사항이 있다.</li>\n</ul>\n<h2>들었던 생각</h2>\n<ul>\n<li>깊은 복사는 불변성을 보장하지만 비용이 비싸기 때문에, 어느정도의 트레이드 오프가 있다고 생각</li>\n<li>카피-온-라이트 패턴과 깊은 복사를 적절하게 사용해서 어떻게 하면 불변성을 지킬 수 있을지에 대한 고민이 필요하다.</li>\n</ul>","frontmatter":{"title":"신뢰할 수 없는 코드를 쓰면서 불변성 지키기","date":"September 17, 2023"},"fields":{"slug":"/contents/posts/2023-09-17/","readingTime":{"minutes":7.65}}},"seriesList":{"edges":[{"node":{"id":"5267d72c-500b-59e9-9927-51ccdcf24b4a","fields":{"slug":"/contents/posts/2020-12-24/"},"frontmatter":{"title":"사진학도가 개발자가 된 이유"}}},{"node":{"id":"7a575c97-2286-5eb3-9a4e-df5412bfb335","fields":{"slug":"/contents/posts/2021-05-10/"},"frontmatter":{"title":"Intersection Observer API를 활용한 무한스크롤"}}},{"node":{"id":"0f295bb2-6a3c-511b-99d3-3d903307287d","fields":{"slug":"/contents/posts/2021-05-17/"},"frontmatter":{"title":"기술을 할 것인가, 예술을 할 것인가"}}},{"node":{"id":"9f0c0170-6efd-5ba0-b3b2-7130bedea7a0","fields":{"slug":"/contents/posts/2021-06-13/"},"frontmatter":{"title":"코딩 부트캠프와 좋은 개발자"}}},{"node":{"id":"3809cc24-7495-5555-925d-dc49258ffc52","fields":{"slug":"/contents/posts/2021-07-04/"},"frontmatter":{"title":"Prototype"}}},{"node":{"id":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d","fields":{"slug":"/contents/posts/2021-08-11/"},"frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)"}}},{"node":{"id":"5e2b28f0-928d-5111-af17-8be7fbe9ec39","fields":{"slug":"/contents/posts/2021-08-12/"},"frontmatter":{"title":"\"함수 컴포넌트\"와 \"함수형 컴포넌트\"가 같은 말이라고 생각하시나요?"}}},{"node":{"id":"80af794d-6d8b-57a1-a2d1-64b3e3b98fa7","fields":{"slug":"/contents/posts/2021-08-16/"},"frontmatter":{"title":"React Context Api"}}},{"node":{"id":"6ce9e47c-23b4-5026-bed6-116351eb8aee","fields":{"slug":"/contents/posts/2021-08-21/"},"frontmatter":{"title":"React Portal"}}},{"node":{"id":"88cdf508-0abb-5014-8d70-e65d35c6d884","fields":{"slug":"/contents/posts/2021-08-22/"},"frontmatter":{"title":"제어 컴포넌트와 비제어 컴포넌트"}}},{"node":{"id":"0d93f1f5-2ccc-54b6-b943-7179687ac266","fields":{"slug":"/contents/posts/2021-08-30/"},"frontmatter":{"title":"TDZ (Temporal Dead Zone)"}}},{"node":{"id":"457d0b1b-3d90-5eea-a66f-8587373ab7c6","fields":{"slug":"/contents/posts/2021-09-04/"},"frontmatter":{"title":"VAC 패턴"}}},{"node":{"id":"b0b1c6d8-47d0-5edf-9261-25d3a5a75ad2","fields":{"slug":"/contents/posts/2021-09-09/"},"frontmatter":{"title":"Typescript Alias 설정시 마주친 오류"}}},{"node":{"id":"c2550142-36f4-5398-a554-702b8fa1b6b8","fields":{"slug":"/contents/posts/2021-10-05/"},"frontmatter":{"title":"patch-package로 외부 라이브러리 수정해서 사용하기"}}},{"node":{"id":"36da5bac-6acc-5daa-b307-4a9fdc74542f","fields":{"slug":"/contents/posts/2021-11-25/"},"frontmatter":{"title":"Custom hook vs Function"}}},{"node":{"id":"2a55cc9e-c79c-5a4d-ac53-a0d36cc69597","fields":{"slug":"/contents/posts/2021-12-19/"},"frontmatter":{"title":"NPM"}}},{"node":{"id":"6d5384bb-c04f-5cc7-945c-5aea5380bb94","fields":{"slug":"/contents/posts/2021-12-31/"},"frontmatter":{"title":"2021년 회고"}}},{"node":{"id":"745a2241-d9b5-5ce0-b6fd-f2a66699554d","fields":{"slug":"/contents/posts/2022-01-05/"},"frontmatter":{"title":":focus-within"}}},{"node":{"id":"b794f451-f15c-5011-8dba-34a5b533b144","fields":{"slug":"/contents/posts/2022-02-28/"},"frontmatter":{"title":"div에서 placeholder 사용하기 (styled-component)"}}},{"node":{"id":"7c078298-d430-54a2-a954-63a6687c7328","fields":{"slug":"/contents/posts/2022-03-13/"},"frontmatter":{"title":"Tooltip component 트러블 슈팅"}}},{"node":{"id":"f1e4e298-5cae-5a57-8798-17ababf157e0","fields":{"slug":"/contents/posts/2022-04-01/"},"frontmatter":{"title":"OSI 7계층 중 1계층에 대해서 알아보자"}}},{"node":{"id":"279cb68d-a1a3-5ee4-b743-784d2bf365c5","fields":{"slug":"/contents/posts/2022-05-22/"},"frontmatter":{"title":"프론트앤드에서의 테스트 (나에겐 너무나 멀고 힘든 테스트코드 짜기..)"}}},{"node":{"id":"83ff9034-42a0-5267-bc2b-d710f2446cff","fields":{"slug":"/contents/posts/2022-06-05/"},"frontmatter":{"title":"debounce 트러블 슈팅"}}},{"node":{"id":"796731f6-1035-5bb8-ac76-467aae3fa171","fields":{"slug":"/contents/posts/2022-06-11/"},"frontmatter":{"title":"Object Delete"}}},{"node":{"id":"bbb421e5-8831-5038-a552-96243600d346","fields":{"slug":"/contents/posts/2022-06-25/"},"frontmatter":{"title":"Modal esc 관련 트러블 슈팅"}}},{"node":{"id":"df7ea411-5375-56e2-8ce9-4f86bb631af7","fields":{"slug":"/contents/posts/2022-07-20/"},"frontmatter":{"title":"OSI 7계층 중 2계층에 대해서 알아보자"}}},{"node":{"id":"bd139eae-9fe0-53cd-9205-95f18d33e90d","fields":{"slug":"/contents/posts/2022-08-17/"},"frontmatter":{"title":"페이지네이션 검색 관련 트러블슈팅"}}},{"node":{"id":"a8bfc1a9-ef8f-554f-8caf-5c17a027f52a","fields":{"slug":"/contents/posts/2022-09-10/"},"frontmatter":{"title":"이제 deep copy할 때 structuredClone을 씁시다."}}},{"node":{"id":"0cabe0ee-d57f-5cc9-8402-1a960f86eed7","fields":{"slug":"/contents/posts/2022-09-12/"},"frontmatter":{"title":"javascript class와 private 속성"}}},{"node":{"id":"3a533e42-a168-5aad-bb6b-0bee817a94cd","fields":{"slug":"/contents/posts/2022-09-24/"},"frontmatter":{"title":"TypeScript의 Soundness와 Type Assertion (as 떡칠하지 말자..)"}}},{"node":{"id":"9f1a0f31-42b4-5c43-8baa-c5973a1a5281","fields":{"slug":"/contents/posts/2022-09-28/"},"frontmatter":{"title":"어쩐지 yarn으로 패키지 설치할 때 오류가 났다.."}}},{"node":{"id":"74180524-c983-5af9-810b-e70418f145a5","fields":{"slug":"/contents/posts/2022-10-06/"},"frontmatter":{"title":"storybook addon 안보일때"}}},{"node":{"id":"a9317839-66e0-5734-a125-5266ac700f9f","fields":{"slug":"/contents/posts/2022-12-31/"},"frontmatter":{"title":"2022년 회고"}}},{"node":{"id":"e0593ebb-38b6-5d5b-bd37-63a6740ea2e8","fields":{"slug":"/contents/posts/2023-07-05/"},"frontmatter":{"title":"get image api 오류 트러블 슈팅"}}},{"node":{"id":"a5ffa0e0-ac0f-592c-a606-ef5545b8d5f5","fields":{"slug":"/contents/posts/2023-08-05/"},"frontmatter":{"title":"The Progressive JavaScript Framework"}}},{"node":{"id":"dba241d0-3594-5a1d-a854-be8184071124","fields":{"slug":"/contents/posts/2023-08-13/"},"frontmatter":{"title":"why can’t use window in vue template?"}}},{"node":{"id":"3bfdd15b-b1ae-57eb-98d8-ac40ffe55a63","fields":{"slug":"/contents/posts/2023-08-25/"},"frontmatter":{"title":"처음 남의 코드를 받으면 뭘 해야할까?"}}},{"node":{"id":"f399c871-2d22-5b62-ae86-75e0aa456d6d","fields":{"slug":"/contents/posts/2023-08-27/"},"frontmatter":{"title":"동물의 숲 짤 생성기를 만들었다"}}},{"node":{"id":"a78e398b-f8c7-56c1-a2c0-deedd720557b","fields":{"slug":"/contents/posts/2023-09-17/"},"frontmatter":{"title":"신뢰할 수 없는 코드를 쓰면서 불변성 지키기"}}},{"node":{"id":"a5b16fda-7eb6-5089-a91c-9231b9dd28d0","fields":{"slug":"/contents/posts/2023-10-01/"},"frontmatter":{"title":"mac에 rocky linux 설치하기"}}},{"node":{"id":"87297bfb-cf0a-5b5e-937c-f2aaa8295258","fields":{"slug":"/contents/posts/2023-10-09/"},"frontmatter":{"title":"nx로 모노레포 구축하기 (삽질기록)"}}},{"node":{"id":"29deefa4-82bd-5722-83d0-c11c3cf808d8","fields":{"slug":"/contents/posts/2023-10-22/"},"frontmatter":{"title":"yalc: npm publish없이 패키지를 테스트할 수 있는 방법"}}}]},"previous":{"fields":{"slug":"/contents/posts/2023-08-27/"},"frontmatter":{"title":"동물의 숲 짤 생성기를 만들었다"}},"next":{"fields":{"slug":"/contents/posts/2023-10-01/"},"frontmatter":{"title":"mac에 rocky linux 설치하기"}}},"pageContext":{"id":"a78e398b-f8c7-56c1-a2c0-deedd720557b","series":null,"previousPostId":"f399c871-2d22-5b62-ae86-75e0aa456d6d","nextPostId":"a5b16fda-7eb6-5089-a91c-9231b9dd28d0"}},"staticQueryHashes":[],"slicesMap":{}}