{"componentChunkName":"component---src-templates-post-jsx","path":"/contents/posts/2022-06-25/","result":{"data":{"site":{"siteMetadata":{"title":"kimnamsun"}},"markdownRemark":{"id":"bbb421e5-8831-5038-a552-96243600d346","excerpt":"요구사항 모달이 2개 이상 띄워져있을 때 가장 위의 것부터 close되게 해주세요. 기존 모달의 구조 body에 적용된 handleKeydown 이벤트 안에서 가 escape key일경우에 onClose를 해주었다. 때문에, 모달이 2개 이상 띄워져도 esc를 누르면 한꺼번에 close되고 있었다. 1차 리팩토링 ModalRoot에 ref를 지정해줘서, …","html":"<h1>요구사항</h1>\n<ul>\n<li>모달이 2개 이상 띄워져있을 때 가장 위의 것부터 close되게 해주세요.</li>\n</ul>\n<h1>기존 모달의 구조</h1>\n<ul>\n<li>body에 적용된 handleKeydown 이벤트 안에서 <code class=\"language-text\">e.key</code>가 escape key일경우에 onClose를 해주었다. 때문에, 모달이 2개 이상 띄워져도 esc를 누르면 한꺼번에 close되고 있었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Modal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Modal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  open<span class=\"token punctuation\">,</span>\n  onClose<span class=\"token punctuation\">,</span>\n  isInterrupt<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ModalProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>open<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">ESCAPE_KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Escape'</span>\n\n    <span class=\"token keyword\">const</span> handleKeydown <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onClose <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token constant\">ESCAPE_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>open<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Modal open<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>open<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ModalRoot role<span class=\"token operator\">=</span><span class=\"token string\">\"presentation\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ModalDim\n          <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalRoot<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Modal<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>1차 리팩토링</h1>\n<ul>\n<li>ModalRoot에 ref를 지정해줘서, ref.current와 modals의 마지막 요소가 같지 않으면 return해주었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> modalRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>open<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">ESCAPE_KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Escape'</span>\n\n  <span class=\"token keyword\">const</span> handleKeydown <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onClose <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token constant\">ESCAPE_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> modals <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[role=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">MODAL_ROLE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modals<span class=\"token punctuation\">[</span>modals<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> modalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">onClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">...</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>open<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span>\n\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Modal open<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>open<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ModalRoot role<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">MODAL_ROLE</span><span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>modalRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ModalDim\n          <span class=\"token operator\">...</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalRoot<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Modal<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h1>2차 리팩토링</h1>\n<ul>\n<li>escape key를 지정해주는건 너무 메뉴얼하다. 만약에 앱도 제공한다고 가정한다면 esc는 작동되지 않을 것이다.</li>\n</ul>\n<h3>HTMLDialogElement.showModal()</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal\">https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal</a></p>\n<blockquote>\n<p>showModal()메서드는 다른 대화 상자 위에 대화 상자를 모달로 표시합니다. <code class=\"language-text\">::backdrop</code> 요소 와 함께 최상위 레이어에 표시됩니다.\n대화 상자 외부의 상호 작용이 차단되고 대화 상자 외부의 콘텐츠가 비활성화됩니다.</p>\n</blockquote>\n<ul>\n<li>아직 실험적 기술이라는 HTMLDialogElement의 <code class=\"language-text\">showModal()</code>. 해당 메서드를 사용하게 되면 esc key를 매뉴얼하게 지정하지 않아도 이미 esc를 통해 close하는 기능이 적용되어있다.</li>\n<li>modal을 <code class=\"language-text\">dialog</code>태그로 변경하고 showModal 메서드를 사용하도록 리팩토링했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> modalRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLDialogElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>open<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    modalRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>open<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Modal open<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>open<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ModalRoot\n      role<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">MODAL_ROLE</span><span class=\"token punctuation\">}</span>\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>modalRef<span class=\"token punctuation\">}</span>\n      onClose<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> modals <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[role=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">MODAL_ROLE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modals<span class=\"token punctuation\">[</span>modals<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> modalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        onClose<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ModalDim\n        <span class=\"token operator\">...</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalRoot<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Modal<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h1>문제상황</h1>\n<ul>\n<li>위와 같이 2차 리팩토링까지 마쳤을때 modal은 기능상으로 전혀 문제가 없었다. 하지만, jest에서 테스트가 깨졌다.<br>\njest에서 showModal() 메서드를 아예 찾지 못하는 문제가 발생했다.</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/nsunny0908/post/36d9abd1-7383-4b9d-a9d9-f73fbd07b8f7/image.png\"></p>\n<p>해당 문제를 해결하려고 구글링을 하다가, 나와 비슷한 문제를 겪은 사람을 발견했다.</p>\n<p><a href=\"https://stackoverflow.com/questions/53271193/typeerror-scrollintoview-is-not-a-function/53294906#53294906\">TypeError: scrollIntoView is not a function</a></p>\n<p>jest내에서 임의로 함수를 모킹해서 해결했다는 내용이였다.</p>\n<p><img src=\"https://velog.velcdn.com/images/nsunny0908/post/0c570420-98bc-454a-ada6-40189009afe1/image.png\"></p>\n<p>그래서 모킹해줬더니,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">window<span class=\"token punctuation\">.</span>HTMLDialogElement<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>showModal <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/nsunny0908/post/03504b84-7bb5-4c2b-85ba-ade58f754009/image.png\"></p>\n<p>타입에러가 떴다.</p>\n<h1>삽질 결과 🪓</h1>\n<ul>\n<li>\n<p>jest는 jsdom에서 돌아간다. (jsdom이 브라우저 환경인 것처럼 시뮬레이션해주는 역할)<br>\njsdom 에서 htmldialogElement가 서포트가 안되는 게 문제의 원인이였다.. 😇 (함수를 찾을 수 없다고 뜬 이유)</p>\n<p><a href=\"https://stackoverflow.com/questions/53271193/typeerror-scrollintoview-is-not-a-function/53294906#53294906\">https://stackoverflow.com/questions/53271193/typeerror-scrollintoview-is-not-a-function/53294906#53294906</a></p>\n<p>게다가 typescript에서도 아직까지 dialog 태그에 대한 충분한 지원이 되지 않는 것 같다. (타입 에러가 뜬 이유)</p>\n<p><a href=\"https://github.com/Microsoft/TypeScript/issues/16880\">https://github.com/Microsoft/TypeScript/issues/16880</a></p>\n</li>\n</ul>\n<h1>느낀 점</h1>\n<ul>\n<li>\n<p>실험적 기술은 생각보다 지원이 되지 않는 라이브러리들이 많다는 걸 느꼈다..😹</p>\n<p><img src=\"https://velog.velcdn.com/images/nsunny0908/post/bfa3bcd0-0779-4679-8e3b-70e083efbc4c/image.png\"></p>\n</li>\n</ul>","frontmatter":{"title":"Modal esc 관련 트러블 슈팅","date":"June 25, 2022"},"fields":{"slug":"/contents/posts/2022-06-25/","readingTime":{"minutes":4.15}}},"seriesList":{"edges":[{"node":{"id":"5267d72c-500b-59e9-9927-51ccdcf24b4a","fields":{"slug":"/contents/posts/2020-12-24/"},"frontmatter":{"title":"사진학도가 개발자가 된 이유"}}},{"node":{"id":"7a575c97-2286-5eb3-9a4e-df5412bfb335","fields":{"slug":"/contents/posts/2021-05-10/"},"frontmatter":{"title":"Intersection Observer API를 활용한 무한스크롤"}}},{"node":{"id":"0f295bb2-6a3c-511b-99d3-3d903307287d","fields":{"slug":"/contents/posts/2021-05-17/"},"frontmatter":{"title":"기술을 할 것인가, 예술을 할 것인가"}}},{"node":{"id":"9f0c0170-6efd-5ba0-b3b2-7130bedea7a0","fields":{"slug":"/contents/posts/2021-06-13/"},"frontmatter":{"title":"코딩 부트캠프와 좋은 개발자"}}},{"node":{"id":"3809cc24-7495-5555-925d-dc49258ffc52","fields":{"slug":"/contents/posts/2021-07-04/"},"frontmatter":{"title":"Prototype"}}},{"node":{"id":"ca0cb7cb-a3fe-525d-a38c-6cbd1852bd1d","fields":{"slug":"/contents/posts/2021-08-11/"},"frontmatter":{"title":"null 병합 연산자(nullish coalescing operator)"}}},{"node":{"id":"5e2b28f0-928d-5111-af17-8be7fbe9ec39","fields":{"slug":"/contents/posts/2021-08-12/"},"frontmatter":{"title":"\"함수 컴포넌트\"와 \"함수형 컴포넌트\"가 같은 말이라고 생각하시나요?"}}},{"node":{"id":"80af794d-6d8b-57a1-a2d1-64b3e3b98fa7","fields":{"slug":"/contents/posts/2021-08-16/"},"frontmatter":{"title":"React Context Api"}}},{"node":{"id":"6ce9e47c-23b4-5026-bed6-116351eb8aee","fields":{"slug":"/contents/posts/2021-08-21/"},"frontmatter":{"title":"React Portal"}}},{"node":{"id":"88cdf508-0abb-5014-8d70-e65d35c6d884","fields":{"slug":"/contents/posts/2021-08-22/"},"frontmatter":{"title":"제어 컴포넌트와 비제어 컴포넌트"}}},{"node":{"id":"0d93f1f5-2ccc-54b6-b943-7179687ac266","fields":{"slug":"/contents/posts/2021-08-30/"},"frontmatter":{"title":"TDZ (Temporal Dead Zone)"}}},{"node":{"id":"457d0b1b-3d90-5eea-a66f-8587373ab7c6","fields":{"slug":"/contents/posts/2021-09-04/"},"frontmatter":{"title":"VAC 패턴"}}},{"node":{"id":"b0b1c6d8-47d0-5edf-9261-25d3a5a75ad2","fields":{"slug":"/contents/posts/2021-09-09/"},"frontmatter":{"title":"Typescript Alias 설정시 마주친 오류"}}},{"node":{"id":"c2550142-36f4-5398-a554-702b8fa1b6b8","fields":{"slug":"/contents/posts/2021-10-05/"},"frontmatter":{"title":"patch-package로 외부 라이브러리 수정해서 사용하기"}}},{"node":{"id":"36da5bac-6acc-5daa-b307-4a9fdc74542f","fields":{"slug":"/contents/posts/2021-11-25/"},"frontmatter":{"title":"Custom hook vs Function"}}},{"node":{"id":"2a55cc9e-c79c-5a4d-ac53-a0d36cc69597","fields":{"slug":"/contents/posts/2021-12-19/"},"frontmatter":{"title":"NPM"}}},{"node":{"id":"6d5384bb-c04f-5cc7-945c-5aea5380bb94","fields":{"slug":"/contents/posts/2021-12-31/"},"frontmatter":{"title":"2021년 회고"}}},{"node":{"id":"745a2241-d9b5-5ce0-b6fd-f2a66699554d","fields":{"slug":"/contents/posts/2022-01-05/"},"frontmatter":{"title":":focus-within"}}},{"node":{"id":"b794f451-f15c-5011-8dba-34a5b533b144","fields":{"slug":"/contents/posts/2022-02-28/"},"frontmatter":{"title":"div에서 placeholder 사용하기 (styled-component)"}}},{"node":{"id":"7c078298-d430-54a2-a954-63a6687c7328","fields":{"slug":"/contents/posts/2022-03-13/"},"frontmatter":{"title":"Tooltip component 트러블 슈팅"}}},{"node":{"id":"f1e4e298-5cae-5a57-8798-17ababf157e0","fields":{"slug":"/contents/posts/2022-04-01/"},"frontmatter":{"title":"OSI 7계층 중 1계층에 대해서 알아보자"}}},{"node":{"id":"279cb68d-a1a3-5ee4-b743-784d2bf365c5","fields":{"slug":"/contents/posts/2022-05-22/"},"frontmatter":{"title":"프론트앤드에서의 테스트 (나에겐 너무나 멀고 힘든 테스트코드 짜기..)"}}},{"node":{"id":"83ff9034-42a0-5267-bc2b-d710f2446cff","fields":{"slug":"/contents/posts/2022-06-05/"},"frontmatter":{"title":"debounce 트러블 슈팅"}}},{"node":{"id":"796731f6-1035-5bb8-ac76-467aae3fa171","fields":{"slug":"/contents/posts/2022-06-11/"},"frontmatter":{"title":"Object Delete"}}},{"node":{"id":"bbb421e5-8831-5038-a552-96243600d346","fields":{"slug":"/contents/posts/2022-06-25/"},"frontmatter":{"title":"Modal esc 관련 트러블 슈팅"}}},{"node":{"id":"df7ea411-5375-56e2-8ce9-4f86bb631af7","fields":{"slug":"/contents/posts/2022-07-20/"},"frontmatter":{"title":"OSI 7계층 중 2계층에 대해서 알아보자"}}},{"node":{"id":"bd139eae-9fe0-53cd-9205-95f18d33e90d","fields":{"slug":"/contents/posts/2022-08-17/"},"frontmatter":{"title":"페이지네이션 검색 관련 트러블슈팅"}}},{"node":{"id":"a8bfc1a9-ef8f-554f-8caf-5c17a027f52a","fields":{"slug":"/contents/posts/2022-09-10/"},"frontmatter":{"title":"이제 deep copy할 때 structuredClone을 씁시다."}}},{"node":{"id":"0cabe0ee-d57f-5cc9-8402-1a960f86eed7","fields":{"slug":"/contents/posts/2022-09-12/"},"frontmatter":{"title":"javascript class와 private 속성"}}},{"node":{"id":"3a533e42-a168-5aad-bb6b-0bee817a94cd","fields":{"slug":"/contents/posts/2022-09-24/"},"frontmatter":{"title":"TypeScript의 Soundness와 Type Assertion (as 떡칠하지 말자..)"}}},{"node":{"id":"9f1a0f31-42b4-5c43-8baa-c5973a1a5281","fields":{"slug":"/contents/posts/2022-09-28/"},"frontmatter":{"title":"어쩐지 yarn으로 패키지 설치할 때 오류가 났다.."}}},{"node":{"id":"74180524-c983-5af9-810b-e70418f145a5","fields":{"slug":"/contents/posts/2022-10-06/"},"frontmatter":{"title":"storybook addon 안보일때"}}},{"node":{"id":"a9317839-66e0-5734-a125-5266ac700f9f","fields":{"slug":"/contents/posts/2022-12-31/"},"frontmatter":{"title":"2022년 회고"}}},{"node":{"id":"e0593ebb-38b6-5d5b-bd37-63a6740ea2e8","fields":{"slug":"/contents/posts/2023-07-05/"},"frontmatter":{"title":"get image api 오류 트러블 슈팅"}}},{"node":{"id":"a5ffa0e0-ac0f-592c-a606-ef5545b8d5f5","fields":{"slug":"/contents/posts/2023-08-05/"},"frontmatter":{"title":"The Progressive JavaScript Framework"}}},{"node":{"id":"dba241d0-3594-5a1d-a854-be8184071124","fields":{"slug":"/contents/posts/2023-08-13/"},"frontmatter":{"title":"why can’t use window in vue template?"}}},{"node":{"id":"3bfdd15b-b1ae-57eb-98d8-ac40ffe55a63","fields":{"slug":"/contents/posts/2023-08-25/"},"frontmatter":{"title":"처음 남의 코드를 받으면 뭘 해야할까?"}}},{"node":{"id":"f399c871-2d22-5b62-ae86-75e0aa456d6d","fields":{"slug":"/contents/posts/2023-08-27/"},"frontmatter":{"title":"동물의 숲 짤 생성기를 만들었다"}}},{"node":{"id":"a78e398b-f8c7-56c1-a2c0-deedd720557b","fields":{"slug":"/contents/posts/2023-09-17/"},"frontmatter":{"title":"신뢰할 수 없는 코드를 쓰면서 불변성 지키기"}}}]},"previous":{"fields":{"slug":"/contents/posts/2022-06-11/"},"frontmatter":{"title":"Object Delete"}},"next":{"fields":{"slug":"/contents/posts/2022-07-20/"},"frontmatter":{"title":"OSI 7계층 중 2계층에 대해서 알아보자"}}},"pageContext":{"id":"bbb421e5-8831-5038-a552-96243600d346","series":null,"previousPostId":"796731f6-1035-5bb8-ac76-467aae3fa171","nextPostId":"df7ea411-5375-56e2-8ce9-4f86bb631af7"}},"staticQueryHashes":[],"slicesMap":{}}